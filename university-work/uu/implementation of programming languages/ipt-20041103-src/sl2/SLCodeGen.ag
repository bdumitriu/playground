{-# LINE 22 "SLCodeGen.lag" #-}
INCLUDE "SLCodeGenEnv.ag"

{type CodeGen  = [S] -> [S]}

ATTR Root [  |  | ppCode : PP_Doc ]
SEM Root
  | Root      lhs  . ppCode         =  vlist  .  map (text . show )  .  (@expr.code)  .  (TRAP 0:)  .  (HALT:)  $   []

--
-- Calls to loadLoacal and storeLocal were modified so that now they also include the
-- value of the psldispl attribute which is computed (and explained) in SLCodeGenEnv.
-- Call to lamDefCode was also modified to include the value of the lusage attribute
-- (also computed and explained in SLCodeGenEnv).
--

ATTR Expr [  |  | code : CodeGen]
SEM Expr
  | Unit      lhs  . code           =  id
  | Intexpr   lhs  . code           =  (LDC @int:)
  | Boolexpr  lhs  . code           =  if  @bool then (LDC 1:) else (LDC 0:)
  | Ident     lhs  . code           =  (loadLocal @lhs.level @idLevel @idDispl (codeSize @restp) @psldispl)
                                       . (annoteCode ("copy of " ++  @var) (codeSize @restp))
              loc  . (idLevel,idDispl)
                                    =  lookupVar  @var  @lhs.env
  | Op        lhs  . code           =  @le.code .  @re.code . (opCode  @op:)
  | If        lhs  . code           =  @cond.code
                                       .  (BRF @afterThenLabel :)
                                       .  @thenExpr.code
                                       .  annoteCode "then value" (codeSize  @thenExpr.resType)
                                       .  (BRA  @afterElseLabel :)
                                       .  (DEFLABEL  @afterThenLabel:)
                                       .  @elseExpr.code
                                       .  annoteCode "else value" (codeSize  @elseExpr.resType)
                                       .  (DEFLABEL  @afterElseLabel:)
  | Let       loc  . exprSize       =  codeSize @expr.resType
              lhs  . code           =  @decls.code
                                       .  @expr.code
                                       .  store  STS STMS (-(@decls.localVarsSize +  @exprSize - 1))
                                                 (codeSize  @expr.resType)
                                       .  (AJS (- (@decls.localVarsSize - codeSize  @expr.resType)):)
  | Assign    lhs  . code           =  @expr.code
                                       .  storeLocal   @lhs.level  @varLevel
                                                       @varDispl (codeSize  @expr.resType) @psldispl
              loc  . (varLevel,varDispl)
                                    =  lookupVar @var @lhs.env
  | Apply     lhs  . code           =  @arg.code .  @func.code
  | Lamcall   lhs  . code           =  @call.code . (JSR:)
  | Lam       lhs  . code           =  lamDefCode   @lamLabel  @afterLamLabel  @vars.paramsSize @lamLevel
                                                    @expr.code (codeSize  @expr.resType) @lusage
  | Seq       lhs  . code           =  @exprs.code
  
ATTR Exprs [  |  | code : CodeGen ]
SEM Exprs
  | Nil       lhs  . code           =  id
  | Cons      loc  . codesize       =  codeSize  @hd.resType
              lhs  . code           =  let adjustSP =  if null  @tl.resTypes ||  @codesize == 0
                                                       then id
                                                       else (AJS (-(@codesize)):)
                                       in  @hd.code . adjustSP .  @tl.code

SEM Decl [  |  | code : CodeGen localVarSize : Int]
  | Decl      lhs  . code           =  @expr.code
                                       .  annoteCode ("def of " ++  @var) (codeSize  @type)
              lhs  . localVarSize   =  codeSize  @type

SEM Decls [  |  | code : CodeGen localVarsSize : Int]
  | Nil       lhs  . code           =  id
              lhs  . localVarsSize  =  0
  | Cons      lhs  . code           =  @hd.code .  @tl.code
              lhs  . localVarsSize  =  @hd.localVarSize +  @tl.localVarsSize

SEM Vars [  |  | paramsSize : Int]
  | Nil       lhs  . paramsSize     =  0
  | Cons      lhs  . paramsSize     =  @tl.paramsSize + codeSize  @argtp
{-# LINE 91 "SLCodeGen.lag" #-}
{
lookupVar _ []              = error "Unbound variable!"
lookupVar v ((v',x,y):env)  = if v == v' then (x,y) else lookupVar v env

store singleStore mulStore displ size = 
  if size == 1
  then (singleStore displ:)
  else (mulStore displ size:)

load singleLoad mulLoad displ size = 
  if size == 1
  then (singleLoad displ:)
  else (mulLoad displ size:)

--
-- This function has been modified so that:
--  * it takes an extra argument (the precomputed static link displacement).
--  * it generates different code based on whether there is or is not a precomputed
--    static link for the level that has to be accessed.
--
storeLocal fromLevel toLevel displ size psldispl
  | fromLevel == toLevel	= store STL STML displ size
  | levelDispl /= 0		= ( (LDL levelDispl :)
                                  . (store STA STMA displ size))
  | otherwise			= ( (LDL (-(paramDispl)) :)
                                  . followStaticLink toLevel (fromLevel - 1)
				  . (store STA STMA displ size))
  where
  levelDispl = lookupLevel toLevel psldispl

--
-- This function has been modified so that:
--  * it takes an extra argument (the precomputed static link displacement).
--  * it generates different code based on whether there is or is not a precomputed
--    static link for the level that has to be accessed.
--
loadLocal fromLevel toLevel displ size psldispl
  | fromLevel == toLevel	= load LDL LDML displ size
  | levelDispl /= 0		= ( (LDL levelDispl :)
                                  . (load LDA LDMA displ size))
  | otherwise			= ( (LDL (-(paramDispl)) :)
                                  . followStaticLink toLevel (fromLevel - 1)
				  . (load LDA LDMA displ size))
  where
  levelDispl = lookupLevel toLevel psldispl

--
-- Looks up a level in a static link displacement structure and returns:
--  * the displacement associated with the static link that leads to the
--    specified level if an entry for the level is found.
--  * 0 if the level is not found (there is no danger of confusion since a
--    displacement of 0 will never appear as a legal value in the structure).
--
lookupLevel :: Int -> LUsage -> Int
lookupLevel n []		= 0
lookupLevel n ((x, y) : xs)
  | n == x			= y
  | otherwise			= lookupLevel n xs

followStaticLink toLevel fromLevel =
  if toLevel == fromLevel
  then id
  else  ( (LDA (-(paramDispl)):)
        . (annoteCode ("SL lev " ++ show fromLevel) 1)
        . (followStaticLink toLevel (fromLevel - 1)))

--
-- Added two new parameters:
--  * bodyLevel - the level of the code
--  * lusage - a list associating levels with the number of times they are accessed
-- 
-- Changed the code so that a call to the precomputeStaticLinks is made in the
-- right place.
--
lamDefCode entryLabel afterLabel szParams bodyLevel bodyCode szResult lusage = 
  let  disOfRET  = szParams + sizeOfLamAdm - szResult - 1
       szOfAJS   = disOfRET - 1
  in  (LDR "MP":)
      . (annoteCode "Static Link" 1)
      . (LDLABEL entryLabel:)
      . (annoteCode "Start PC" 1)
      . (BRA afterLabel:)
      . (DEFLABEL entryLabel:)
      . (LDR "MP":) 
      . (ANNOTE "SP" 0 0 "blue" "Prev MP":)
      . (LDRR "MP" "SP":)
      . precomputeStaticLinks (max (bodyLevel - 1) 0) lusage
      . bodyCode
      . (storeLocal 0 0 (-(paramDispl + szParams)) szResult [])
      . (LDRR "SP" "MP":) . (STR "MP":)
      . (if disOfRET > 0 then (STS (-(disOfRET)):) else id)
      . (if szOfAJS > 0 then (AJS (-(szOfAJS)):) else id)
      . (RET:)
      . (DEFLABEL afterLabel:)

--
-- Generates code for precomputing the necessary static links (i.e. the ones for
-- levels which are at least 2 levels down and accessed at least twice).
--
precomputeStaticLinks bodyLevel lusage =
	_precomputeStaticLinks (bodyLevel + 1) 0 lusage

--
-- Helper function which does the actual work of precomputeStaticLinks.
--
_precomputeStaticLinks bodyLevel curLevel lusage
  | curLevel == bodyLevel		= id
  | slNeeded (curLevel - 1) lusage	= ( LDL (-(paramDispl)) :)
                                          . generateLdas (bodyLevel - curLevel)
                                          . _precomputeStaticLinks bodyLevel (curLevel + 1) lusage
  | otherwise                           = _precomputeStaticLinks bodyLevel (curLevel + 1) lusage

--
-- Generates n "LDA -paramDispl" instructions.
--
generateLdas :: Int -> [S] -> [S]
generateLdas 0 = id
generateLdas n = (LDA (-(paramDispl)) :) . generateLdas (n - 1)

--
-- Returns True if a static link for level is need and False otherwise.
--
slNeeded :: Int -> LUsage -> Bool
slNeeded level lusage = not . null . filter (\(x, y) -> (x == level) && (y > 1)) $ lusage

annoteCode msg size = (ANNOTE "SP" (1-size) 0 "green" msg:)

sizeOfLamAdm =  2 :: Int
}
