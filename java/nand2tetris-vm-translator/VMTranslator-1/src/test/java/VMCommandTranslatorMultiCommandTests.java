import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import util.Utils;

import java.io.IOException;
import java.util.stream.Stream;

public class VMCommandTranslatorMultiCommandTests {

    static Stream<Arguments> resourceNames() {
        return Stream.of(
                Arguments.of("vm/BasicTest.vm"),
                Arguments.of("vm/PointerTest.vm"),
                Arguments.of("vm/SimpleAdd.vm"),
                Arguments.of("vm/StackTest.vm"),
                Arguments.of("vm/StaticTest.vm"));
    }

    @DisplayName("All commands from example files are translated successfully")
    @ParameterizedTest(name = "{index}: {0}")
    @MethodSource("resourceNames")
    public void testAllCommandsTranslate(String resourceName) throws IOException {
        final String program = Utils.getStringFromResource(resourceName);
        final VMCommandTranslator translator = new VMCommandTranslator();
        program.lines().forEach(line -> Assertions.assertDoesNotThrow(() -> translator.translate(line)));
    }

    @DisplayName("Index increments only for commands that require an auto incremented index")
    @Test
    public void testAutoIncrementedIndex() {
        final VMCommandTranslator translator = new VMCommandTranslator();
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getPushLocalTemplateFor("3", "0"),
                translator.translate("push local 3"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getPushLocalTemplateFor("3", "1"),
                translator.translate("push local 3"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getPushThisTemplateFor("3", "2"),
                translator.translate("push this 3"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getPushConstantTemplateFor("3"),
                translator.translate("push constant 3"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getPushThatTemplateFor("3", "3"),
                translator.translate("push that 3"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getNoModifierCommandTemplateFor("eq", "4"),
                translator.translate("eq"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getNoModifierCommandTemplateFor("and"),
                translator.translate("and"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getNoModifierCommandTemplateFor("lt", "5"),
                translator.translate("lt"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getNoModifierCommandTemplateFor("gt", "6"),
                translator.translate("gt"));
    }

    @Test
    public void testCustomTranslationContexts() {
        final VMCommandTranslator translator = new VMCommandTranslator();
        translator.setTranslationContext(new VMTranslationContext() {
            @Override
            public int getNextAutoGeneratedIndex() {
                return 1000;
            }
        });
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getPushLocalTemplateFor("3", "1000"),
                translator.translate("push local 3"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getPushLocalTemplateFor("3", "1000"),
                translator.translate("push local 3"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getPushThisTemplateFor("3", "1000"),
                translator.translate("push this 3"));
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getPushConstantTemplateFor("3"),
                translator.translate("push constant 3"));
        translator.setTranslationContext(new VMTranslationContext() {
            @Override
            public int getNextAutoGeneratedIndex() {
                throw new VMTranslatorException("");
            }
        });
        Assertions.assertThrows(VMTranslatorException.class, () -> {
            translator.translate("push that 3");
        });
        Assertions.assertEquals(
                TestTranslationTemplates.INSTANCE.getNoModifierCommandTemplateFor("and"),
                translator.translate("and"));
    }

    @DisplayName("Multiple threads can use the same translator to translate different programs")
    @Test
    public void testTranslatorThreadSafety() {
        final VMCommandTranslator translator = new VMCommandTranslator();
        final Runnable runnable = () -> {
            Assertions.assertEquals(
                    TestTranslationTemplates.INSTANCE.getPushLocalTemplateFor("3", "0"),
                    translator.translate("push local 3"));
        };
        new Thread(runnable).start();
        new Thread(runnable).start();
    }
}
