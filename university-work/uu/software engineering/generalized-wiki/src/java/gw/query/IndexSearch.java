package gw.query;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.search.Searcher;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.Hits;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.queryParser.ParseException;

import java.io.IOException;


/**This class is able to search the index for a certain match 
*it can also handle a previously generated Query.
*/
public class IndexSearch {


   /** Searches the index for some querysting, and looks only in the searchType field.
   *@param searchType The field to query in
   *@param queryString The values to look for
   *@return An IndexSearchResult with all the hits from the query
   */
   public SearchResult searchIndex(String searchType, String queryString) throws IOException
   {
        Analyzer analyzer = new StandardAnalyzer();
        Query query;
        try {
            query = QueryParser.parse(queryString, searchType, analyzer);
        } catch(ParseException e){
             return new ErrorResult("Query parsing error","Error while trying to parse the query",e);
        }
        try{
            Hits hits = queryIndex(query);
            IndexSearchResult result = new IndexSearchResult(hits);
            result.setSearchTypeAndQuery(searchType, queryString);
            return result;
        }catch(IOException e) {
            return new ErrorResult("Querying error",
                                    "Error while trying to query the database with " + query.toString(),
                                    e);
        }
   }
    
    /**Queries the index using the given query and returns the Hits generated by this query.
    *@param query Query to query the index with.
    *@return The hits generated by the query.
    */
    public Hits queryIndex(Query query) throws IOException
    {
            Searcher searcher = new IndexSearcher(Search.indexPath);
            Hits hits = searcher.search(query);
            return hits;


    }

}
