/* Generated By:JavaCC: Do not edit this line. TokenParser.java */
package editor.parser;

import editor.Constants;
import editor.PDKRootElement;
import editor.PDKToken;

public class TokenParser implements TokenParserConstants {
        private int stOffset;

  final public void tokenList(PDKRootElement root, int startOffset) throws ParseException {
        Token tok;
        PDKToken token;
        int length;

        stOffset = startOffset;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        tok = jj_consume_token(WHITESPACE);
                        stOffset += tok.image.length();
        break;
      case OPERATOR:
        tok = jj_consume_token(OPERATOR);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.OPERATOR_ELEMENT_NAME,
                                Constants.OPERATOR_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case VARIABLE:
        tok = jj_consume_token(VARIABLE);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.VARIABLE_ELEMENT_NAME,
                                Constants.VARIABLE_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case WORD:
        tok = jj_consume_token(WORD);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.WORD_ELEMENT_NAME,
                                Constants.WORD_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case OPEN_ROUND_BRACKET:
        tok = jj_consume_token(OPEN_ROUND_BRACKET);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.OPEN_ROUND_BRACKET_ELEMENT_NAME,
                                Constants.OPEN_ROUND_BRACKET_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case CLOSED_ROUND_BRACKET:
        tok = jj_consume_token(CLOSED_ROUND_BRACKET);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.CLOSED_ROUND_BRACKET_ELEMENT_NAME,
                                Constants.CLOSED_ROUND_BRACKET_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case OPEN_SQUARE_BRACKET:
        tok = jj_consume_token(OPEN_SQUARE_BRACKET);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.OPEN_SQUARE_BRACKET_ELEMENT_NAME,
                                Constants.OPEN_SQUARE_BRACKET_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case CLOSED_SQUARE_BRACKET:
        tok = jj_consume_token(CLOSED_SQUARE_BRACKET);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.CLOSED_SQUARE_BRACKET_ELEMENT_NAME,
                                Constants.CLOSED_SQUARE_BRACKET_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case OPEN_CURLY_BRACKET:
        tok = jj_consume_token(OPEN_CURLY_BRACKET);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.OPEN_CURLY_BRACKET_ELEMENT_NAME,
                                Constants.OPEN_CURLY_BRACKET_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case CLOSED_CURLY_BRACKET:
        tok = jj_consume_token(CLOSED_CURLY_BRACKET);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.CLOSED_CURLY_BRACKET_ELEMENT_NAME,
                                Constants.CLOSED_CURLY_BRACKET_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case DOT:
        tok = jj_consume_token(DOT);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.DOT_ELEMENT_NAME,
                                Constants.DOT_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case NUMBER:
        tok = jj_consume_token(NUMBER);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.NUMBER_ELEMENT_NAME,
                                Constants.NUMBER_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case STRING:
        tok = jj_consume_token(STRING);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.STRING_ELEMENT_NAME,
                                Constants.STRING_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case QUOTED_ITEM:
        tok = jj_consume_token(QUOTED_ITEM);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.QUOTED_ITEM_ELEMENT_NAME,
                                Constants.QUOTED_ITEM_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case SINGLE_LINE_COMMENT:
        tok = jj_consume_token(SINGLE_LINE_COMMENT);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.SINGLE_LINE_COMMENT_ELEMENT_NAME,
                                Constants.SINGLE_LINE_COMMENT_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case MULTI_LINE_COMMENT:
        tok = jj_consume_token(MULTI_LINE_COMMENT);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.MULTI_LINE_COMMENT_ELEMENT_NAME,
                                Constants.MULTI_LINE_COMMENT_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case UNCLOSED_SINGLE_LINE_COMMENT:
        tok = jj_consume_token(UNCLOSED_SINGLE_LINE_COMMENT);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.UNCLOSED_SINGLE_LINE_COMMENT_ELEMENT_NAME,
                                Constants.UNCLOSED_SINGLE_LINE_COMMENT_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case UNCLOSED_MULTI_LINE_COMMENT:
        tok = jj_consume_token(UNCLOSED_MULTI_LINE_COMMENT);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.UNCLOSED_MULTI_LINE_COMMENT_ELEMENT_NAME,
                                Constants.UNCLOSED_MULTI_LINE_COMMENT_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case UNCLOSED_STRING:
        tok = jj_consume_token(UNCLOSED_STRING);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.UNCLOSED_STRING_ELEMENT_NAME,
                                Constants.UNCLOSED_STRING_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case UNCLOSED_QUOTED_ITEM:
        tok = jj_consume_token(UNCLOSED_QUOTED_ITEM);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.UNCLOSED_QUOTED_ITEM_ELEMENT_NAME,
                                Constants.UNCLOSED_QUOTED_ITEM_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      case UNKNOWN_CHAR:
        tok = jj_consume_token(UNKNOWN_CHAR);
                        length = tok.image.length();
                        token = new PDKToken(root, Constants.UNKNOWN_CHAR_ELEMENT_NAME,
                                Constants.UNKNOWN_CHAR_ELEMENT_TYPE, stOffset, stOffset + length);
                        stOffset += length;
                        root.add(token);

                        //System.out.println(token.toString());

        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
      case SINGLE_LINE_COMMENT:
      case UNCLOSED_SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case UNCLOSED_MULTI_LINE_COMMENT:
      case OPERATOR:
      case VARIABLE:
      case NUMBER:
      case WORD:
      case OPEN_ROUND_BRACKET:
      case CLOSED_ROUND_BRACKET:
      case OPEN_SQUARE_BRACKET:
      case CLOSED_SQUARE_BRACKET:
      case OPEN_CURLY_BRACKET:
      case CLOSED_CURLY_BRACKET:
      case DOT:
      case QUOTED_ITEM:
      case UNCLOSED_QUOTED_ITEM:
      case STRING:
      case UNCLOSED_STRING:
      case UNKNOWN_CHAR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  public TokenParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  final private int[] jj_la1_0 = {0x3ffffe,0x3ffffe,};

  public TokenParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TokenParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public TokenParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TokenParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public TokenParser(TokenParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(TokenParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[24];
    for (int i = 0; i < 24; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
