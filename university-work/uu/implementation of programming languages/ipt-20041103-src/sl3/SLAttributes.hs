-- do not edit; automatically generated by UU.AG
module SLAttributes where

import Char
import SLTypes
import Prelude

import UU.Pretty

import SLUnification
import SLTypes

import UU.Pretty

type Assumptions = [(String,Type)]

initgamma = 
             [("&&",bool2bool2bool),
              ("||",bool2bool2bool),
              ("==",int2int2bool),
              ("/=",int2int2bool),
              ("<",int2int2bool),
              (">",int2int2bool),
              ("<=",int2int2bool),
              (">=",int2int2bool),
              ("+",int2int2int),
              ("-",int2int2int),
              ("*",int2int2int),
              ("/",int2int2int)]

lookupVar x [] = TError "Variable not introduced"
lookupVar x ((v,t):vs) = if x == v then t else lookupVar x vs

instantiate unique (TForall i t) = 
  let recurse t = case t of
                    TBound x     -> TVar (unique + x)
                    TFunc a b    -> TFunc (recurse a) (recurse b)
                    TForall _ _  -> sysError "Non-flat type in instantiation."
                    _            -> t
  in (recurse t, unique + i)
instantiate unique t = (t,unique)

abstract env tp  = 
  let  (names, resType)  = abs tp []
       abs t ns  = case t of
                     TVar v       ->  case lookup v ns of
                                        Just i   ->  (ns, TBound i)
                                        Nothing  ->  if v `notFreeIn` env
                                                     then  (ns, TVar v)
                                                     else  let newPos = length ns
                                                           in (ns ++ [(v,newPos)], TBound newPos)
                     TFunc a b    ->  let  (nsA,tpA) = abs a ns
                                           (nsB,tpB) = abs b nsA
                                      in (nsB, TFunc tpA tpB)
                     TInt         ->  (ns,t)
                     TBool        ->  (ns,t)
                     TUnit        ->  (ns,t)
                     TAny         ->  (ns,t)
                     TError _     ->  (ns,t)
                     TForall _ _  ->  sysError "Non-flat type in type abstraction."
                     TBound _     ->  sysError "In type abstraction."
  in if null names then tp else TForall (length names) resType

notFreeIn var env = or (map (notFreeInType . snd) env)
  where notFreeInType t = case t of
                            TVar v        -> v == var
                            TFunc a b     -> notFreeInType a || notFreeInType b
                            TForall i tp  -> notFreeInType tp 
                            _             -> False

mapSnd f xys = [(x, f y) | (x,y) <- xys]
            

type PP_Docs = [PP_Doc]

-- 

call               :: String -> PP_Doc -> PP_Doc
call str doc       = text ("\\" ++ str) >|< pp_braces doc

callList           :: String -> [PP_Doc] -> PP_Doc
callList str docs  = foldl (\a b -> a >-< pp_braces b) (text ("\\"++str)) docs

keyword str        = call "textbf" (text str)
package doc        = call "usepackage" doc

environment          :: String -> PP_Doc -> PP_Doc
environment env doc  = call "begin" (text env) >-< doc >-< call "end" (text env)

document   = environment "document"
landscape  = environment "landscape"
mathmode   = environment "displaymath"

quad       = text "\\quad"
unknown    = text "\\Unknown"

a >##< b = a >|< text "~" >|< b

-- 

header  :: PP_Doc
header  = text "\\def\\FlagUseIPTStyleInBookStyle{\\No}"
  >-< call "documentclass" (text "article")
  >-< package (text "ipt")
  >-< package (text "deduction")
  >-< package (text "lscape")

-- 

over :: String -> PP_Docs -> String -> Judgement -> PP_Doc
over format upper name (gamma,pp,tp) =
  text ("\\ovr[" ++ format ++ "]")
    >-< pp_braces list
          >-< pp_brackets (text ("\\" ++ name))
          >-< pp_braces (callList "Judgement" [ppTexGamma gamma,pp,ppTexType tp])
    where list =  if null upper
                  then empty
                  else foldr1 (\a b -> a >-< quad >-< b) upper

-- 

ppTexAnnotateType (TAny)  = empty
ppTexAnnotateType t       = text "::" >#< ppTexType t

ppTexType t = case t of
  TBool             -> text "Bool"
  TInt              -> text "Int"
  TUnit             -> text "Unit"
  TFunc a b         -> ppLeft a >#< text "\\rightarrow" >#< ppTexType b
  TForall i t       -> text ("\\forall " ++ take i ['a'..] ++ ".") >|< ppTexType t
  TBound i          -> text [chr (i + ord 'a')]
  TVar i            -> text "v_" >|< pp_braces (pp i) 
  TError "unknown"  -> unknown
  _                 -> pp "\\perp"
  where  ppLeft (TFunc a b)  = pp_parens (ppTexType (TFunc a b))
         ppLeft tp           = ppTexType tp

-- 

ppTexGammas          :: Gammas -> PP_Doc
ppTexGammas          = environment "GammasEnvironment" . vlist . map f
   where f (i,as) = callList "GammasEntry" [text (show i),ppTexAssumptions as]  

ppTexAssumptions []  = text "\\emptyset"
ppTexAssumptions as  = (environment "GammaEnvironment" . vlist . map f . correct) as
  where f (str,tp) = callList "GammaEntry" [text (escape str), ppTexType tp]

ppTexGamma           :: Int -> PP_Doc
ppTexGamma i         =  if i == unknownGamma
                          then unknown
                          else call "Gamma_" (text (show i))

inGamma :: Judgement -> PP_Doc
inGamma (gamma,pp,tp) = callList "InGamma" [pp, ppTexType tp, ppTexGamma gamma]

-- 

correct :: Assumptions -> Assumptions
correct []                    = []
correct (("_",tp)  : xs)  = correct xs
correct ((v,tp)    : xs)  = (v,tp) : correct (filter ((v/=) . fst) xs)

(|==>)      :: Subst -> Assumptions -> Assumptions
(|==>) sub  =  let  op (v,t) xs = (v,sub  |=> t) : xs 
               in   foldr op []
      
escape :: String -> String
escape = foldr (\c str -> case c of 
                  '&'  -> "\\&" ++ str
                  x    -> x : str) []

type Gammas     = [(Gamma,Assumptions)]
type Judgement  = (Gamma,PP_Doc,Type)
type Gamma      = Int

unknownGamma   :: Int
unknownGamma   = -1
-- Decl --------------------------------------------------------
{-
   inherited attributes:
      finalSubst           : Subst
      gammaId              : Gamma

   chained attributes:
      gamma                : Assumptions
      gammas               : Gammas
      jgamma               : Assumptions
      nextGamma            : Gamma
      subst                : Subst
      unique               : Int

   synthesised attributes:
      pp                   : PP_Doc
      pptex                : PP_Doc
      tree                 : PP_Doc

-}
{-
   local variables for Decl.Decl:
      ppTp
      inferredType
      declType
      subs
      annoteSub
      annoteTp
      declErr
      sub
      declTp
      derr
      varTp
      pptex
      newgamma

-}
data Decl = Decl_Decl (String) (Type) (Expr)
-- semantic domain
type T_Decl = (Subst) ->
              (Assumptions) ->
              (Gamma) ->
              (Gammas) ->
              (Assumptions) ->
              (Gamma) ->
              (Subst) ->
              (Int) ->
              ( (Assumptions),(Gammas),(Assumptions),(Gamma),(PP_Doc),(PP_Doc),(Subst),(PP_Doc),(Int))
-- cata
sem_Decl :: (Decl) ->
            (T_Decl)
sem_Decl ((Decl_Decl (_var) (_type) (_expr))) =
    (sem_Decl_Decl (_var) (_type) ((sem_Expr (_expr))))
sem_Decl_Decl :: (String) ->
                 (Type) ->
                 (T_Expr) ->
                 (T_Decl)
sem_Decl_Decl (var_) (type_) (expr_) =
    \ _lhsIfinalSubst
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgamma :: (Assumptions)
            _lhsOgammas :: (Gammas)
            _lhsOjgamma :: (Assumptions)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            _exprIgammas :: (Gammas)
            _exprInextGamma :: (Gamma)
            _exprIpp :: (PP_Doc)
            _exprIpptex :: (PP_Doc)
            _exprIsubst :: (Subst)
            _exprItp :: (Type)
            _exprItree :: (PP_Doc)
            _exprIunique :: (Int)
            _exprOfinalSubst :: (Subst)
            _exprOformat :: (String)
            _exprOgamma :: (Assumptions)
            _exprOgammaId :: (Gamma)
            _exprOgammas :: (Gammas)
            _exprOjgamma :: (Assumptions)
            _exprOnextGamma :: (Gamma)
            _exprOsubst :: (Subst)
            _exprOunique :: (Int)
            ( _exprIgammas,_exprInextGamma,_exprIpp,_exprIpptex,_exprIsubst,_exprItp,_exprItree,_exprIunique) =
                (expr_ (_exprOfinalSubst) (_exprOformat) (_exprOgamma) (_exprOgammaId) (_exprOgammas) (_exprOjgamma) (_exprOnextGamma) (_exprOsubst) (_exprOunique))
            -- "./SLPrettyprint.ag"(line 36, column 15)
            (_lhsOpp@_) =
                text  var_ >#<  _ppTp >|<  _declErr >#< text "=" >#<  _exprIpp
            -- "./SLPrettyprint.ag"(line 33, column 15)
            (_ppTp@_) =
                if isAnnotated  type_
                then text "::" >#< show  type_
                else text "::" >#< show  _inferredType
            -- "./SLTypeInference.ag"(line 85, column 17)
            (_inferredType@_) =
                (text . show )  _declType
            -- "./SLTypeInference.ag"(line 84, column 17)
            (_lhsOgamma@_) =
                (var_, _declType) :  _lhsIgamma
            -- "./SLTypeInference.ag"(line 83, column 17)
            (_lhsOsubst@_) =
                _subs
            -- "./SLTypeInference.ag"(line 80, column 17)
            (_declType@_) =
                abstract
                  (mapSnd (_subs  |=> )  _lhsIgamma)
                  _annoteTp
            -- "./SLTypeInference.ag"(line 79, column 17)
            (_subs@_) =
                _annoteSub ||| (_sub |||  _exprIsubst)
            -- "./SLTypeInference.ag"(line 78, column 21)
            ((_annoteSub@_,_annoteTp@_,_declErr@_)) =
                unifyPossiblyAnnoted  type_  _declTp
            -- "./SLTypeInference.ag"(line 77, column 21)
            ((_sub@_,_declTp@_,_derr@_)) =
                unifyMsg  _varTp  _exprItp
            -- "./SLTypeInference.ag"(line 76, column 17)
            (_exprOgamma@_) =
                (var_,_varTp) :  _lhsIgamma
            -- "./SLTypeInference.ag"(line 75, column 17)
            (_varTp@_) =
                TVar  _lhsIunique
            -- "./SLTypeInference.ag"(line 74, column 17)
            (_exprOunique@_) =
                _lhsIunique + 1
            -- "./SLProofTree.ag"(line 46, column 15)
            (_lhsOtree@_) =
                _exprItree
            -- "./SLFormat.ag"(line 30, column 12)
            (_exprOformat@_) =
                ("n")
            -- "./SLPrettyprintTex.ag"(line 29, column 18)
            (_pptex@_) =
                text  var_ >##< ppTexAnnotateType  type_
                >##< text "=" >##<  _exprIpptex
            -- "./SLJudgements.ag"(line 98, column 15)
            (_lhsOjgamma@_) =
                (var_, _declType) : _lhsIjgamma
            -- "./SLJudgements.ag"(line 97, column 15)
            (_exprOgammaId@_) =
                _lhsInextGamma
            -- "./SLJudgements.ag"(line 96, column 15)
            (_exprOnextGamma@_) =
                _lhsInextGamma + 1
            -- "./SLJudgements.ag"(line 95, column 15)
            (_exprOgammas@_) =
                _lhsIgammas ++ [(_lhsInextGamma,_newgamma)]
            -- "./SLJudgements.ag"(line 94, column 15)
            (_exprOjgamma@_) =
                _newgamma
            -- "./SLJudgements.ag"(line 93, column 15)
            (_newgamma@_) =
                (var_, _varTp) : _lhsIjgamma
            -- copy rule (up)
            (_lhsOgammas@_) =
                _exprIgammas
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _exprInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (up)
            (_lhsOunique@_) =
                _exprIunique
            -- copy rule (down)
            (_exprOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_exprOsubst@_) =
                _lhsIsubst
        in  ( _lhsOgamma,_lhsOgammas,_lhsOjgamma,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtree,_lhsOunique)
-- Decls -------------------------------------------------------
{-
   inherited attributes:
      finalSubst           : Subst
      gammaId              : Gamma

   chained attributes:
      gamma                : Assumptions
      gammas               : Gammas
      jgamma               : Assumptions
      nextGamma            : Gamma
      subst                : Subst
      unique               : Int

   synthesised attributes:
      pps                  : [PP_Doc]
      pptexs               : PP_Docs
      trees                : PP_Docs

-}
{-
   local variables for Decls.Cons:
      pptexs

-}
{-
   local variables for Decls.Nil:
      pptexs

-}
type Decls = [(Decl)]
-- semantic domain
type T_Decls = (Subst) ->
               (Assumptions) ->
               (Gamma) ->
               (Gammas) ->
               (Assumptions) ->
               (Gamma) ->
               (Subst) ->
               (Int) ->
               ( (Assumptions),(Gammas),(Assumptions),(Gamma),([PP_Doc]),(PP_Docs),(Subst),(PP_Docs),(Int))
-- cata
sem_Decls :: (Decls) ->
             (T_Decls)
sem_Decls (list) =
    (foldr (sem_Decls_Cons) (sem_Decls_Nil) ((map sem_Decl list)))
sem_Decls_Cons :: (T_Decl) ->
                  (T_Decls) ->
                  (T_Decls)
sem_Decls_Cons (hd_) (tl_) =
    \ _lhsIfinalSubst
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgamma :: (Assumptions)
            _lhsOgammas :: (Gammas)
            _lhsOjgamma :: (Assumptions)
            _lhsOnextGamma :: (Gamma)
            _lhsOpps :: ([PP_Doc])
            _lhsOpptexs :: (PP_Docs)
            _lhsOsubst :: (Subst)
            _lhsOtrees :: (PP_Docs)
            _lhsOunique :: (Int)
            _hdIgamma :: (Assumptions)
            _hdIgammas :: (Gammas)
            _hdIjgamma :: (Assumptions)
            _hdInextGamma :: (Gamma)
            _hdIpp :: (PP_Doc)
            _hdIpptex :: (PP_Doc)
            _hdIsubst :: (Subst)
            _hdItree :: (PP_Doc)
            _hdIunique :: (Int)
            _hdOfinalSubst :: (Subst)
            _hdOgamma :: (Assumptions)
            _hdOgammaId :: (Gamma)
            _hdOgammas :: (Gammas)
            _hdOjgamma :: (Assumptions)
            _hdOnextGamma :: (Gamma)
            _hdOsubst :: (Subst)
            _hdOunique :: (Int)
            _tlIgamma :: (Assumptions)
            _tlIgammas :: (Gammas)
            _tlIjgamma :: (Assumptions)
            _tlInextGamma :: (Gamma)
            _tlIpps :: ([PP_Doc])
            _tlIpptexs :: (PP_Docs)
            _tlIsubst :: (Subst)
            _tlItrees :: (PP_Docs)
            _tlIunique :: (Int)
            _tlOfinalSubst :: (Subst)
            _tlOgamma :: (Assumptions)
            _tlOgammaId :: (Gamma)
            _tlOgammas :: (Gammas)
            _tlOjgamma :: (Assumptions)
            _tlOnextGamma :: (Gamma)
            _tlOsubst :: (Subst)
            _tlOunique :: (Int)
            ( _hdIgamma,_hdIgammas,_hdIjgamma,_hdInextGamma,_hdIpp,_hdIpptex,_hdIsubst,_hdItree,_hdIunique) =
                (hd_ (_hdOfinalSubst) (_hdOgamma) (_hdOgammaId) (_hdOgammas) (_hdOjgamma) (_hdOnextGamma) (_hdOsubst) (_hdOunique))
            ( _tlIgamma,_tlIgammas,_tlIjgamma,_tlInextGamma,_tlIpps,_tlIpptexs,_tlIsubst,_tlItrees,_tlIunique) =
                (tl_ (_tlOfinalSubst) (_tlOgamma) (_tlOgammaId) (_tlOgammas) (_tlOjgamma) (_tlOnextGamma) (_tlOsubst) (_tlOunique))
            -- "./SLPrettyprint.ag"(line 30, column 15)
            (_lhsOpps@_) =
                _hdIpp :  _tlIpps
            -- "./SLProofTree.ag"(line 51, column 15)
            (_lhsOtrees@_) =
                _hdItree :  _tlItrees
            -- "./SLPrettyprintTex.ag"(line 25, column 17)
            (_pptexs@_) =
                _hdIpptex :  _tlIpptexs
            -- copy rule (up)
            (_lhsOgamma@_) =
                _tlIgamma
            -- copy rule (up)
            (_lhsOgammas@_) =
                _tlIgammas
            -- copy rule (up)
            (_lhsOjgamma@_) =
                _tlIjgamma
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _tlInextGamma
            -- copy rule (from local)
            (_lhsOpptexs@_) =
                _pptexs
            -- copy rule (up)
            (_lhsOsubst@_) =
                _tlIsubst
            -- copy rule (up)
            (_lhsOunique@_) =
                _tlIunique
            -- copy rule (down)
            (_hdOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_hdOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_hdOgammaId@_) =
                _lhsIgammaId
            -- copy rule (down)
            (_hdOgammas@_) =
                _lhsIgammas
            -- copy rule (down)
            (_hdOjgamma@_) =
                _lhsIjgamma
            -- copy rule (down)
            (_hdOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (down)
            (_hdOsubst@_) =
                _lhsIsubst
            -- copy rule (down)
            (_hdOunique@_) =
                _lhsIunique
            -- copy rule (down)
            (_tlOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (chain)
            (_tlOgamma@_) =
                _hdIgamma
            -- copy rule (down)
            (_tlOgammaId@_) =
                _lhsIgammaId
            -- copy rule (chain)
            (_tlOgammas@_) =
                _hdIgammas
            -- copy rule (chain)
            (_tlOjgamma@_) =
                _hdIjgamma
            -- copy rule (chain)
            (_tlOnextGamma@_) =
                _hdInextGamma
            -- copy rule (chain)
            (_tlOsubst@_) =
                _hdIsubst
            -- copy rule (chain)
            (_tlOunique@_) =
                _hdIunique
        in  ( _lhsOgamma,_lhsOgammas,_lhsOjgamma,_lhsOnextGamma,_lhsOpps,_lhsOpptexs,_lhsOsubst,_lhsOtrees,_lhsOunique)
sem_Decls_Nil :: (T_Decls)
sem_Decls_Nil  =
    \ _lhsIfinalSubst
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgamma :: (Assumptions)
            _lhsOgammas :: (Gammas)
            _lhsOjgamma :: (Assumptions)
            _lhsOnextGamma :: (Gamma)
            _lhsOpps :: ([PP_Doc])
            _lhsOpptexs :: (PP_Docs)
            _lhsOsubst :: (Subst)
            _lhsOtrees :: (PP_Docs)
            _lhsOunique :: (Int)
            -- "./SLPrettyprint.ag"(line 29, column 15)
            (_lhsOpps@_) =
                []
            -- "./SLProofTree.ag"(line 50, column 15)
            (_lhsOtrees@_) =
                []
            -- "./SLPrettyprintTex.ag"(line 24, column 17)
            (_pptexs@_) =
                []
            -- copy rule (chain)
            (_lhsOgamma@_) =
                _lhsIgamma
            -- copy rule (chain)
            (_lhsOgammas@_) =
                _lhsIgammas
            -- copy rule (chain)
            (_lhsOjgamma@_) =
                _lhsIjgamma
            -- copy rule (chain)
            (_lhsOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (from local)
            (_lhsOpptexs@_) =
                _pptexs
            -- copy rule (chain)
            (_lhsOsubst@_) =
                _lhsIsubst
            -- copy rule (chain)
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOgamma,_lhsOgammas,_lhsOjgamma,_lhsOnextGamma,_lhsOpps,_lhsOpptexs,_lhsOsubst,_lhsOtrees,_lhsOunique)
-- Expr --------------------------------------------------------
{-
   inherited attributes:
      finalSubst           : Subst
      format               : String
      gamma                : Assumptions
      gammaId              : Gamma
      jgamma               : Assumptions

   chained attributes:
      gammas               : Gammas
      nextGamma            : Gamma
      subst                : Subst
      unique               : Int

   synthesised attributes:
      pp                   : PP_Doc
      pptex                : PP_Doc
      tp                   : Type
      tree                 : PP_Doc

-}
{-
   local variables for Expr.Apply:
      tp
      funcErr
      newSubs
      funcType
      argErr
      pptex
      judge

-}
{-
   local variables for Expr.Assign:
      newSubs
      varErr
      exprTp
      exprErr
      vartree
      varformat
      pptex
      varjudge
      judge

-}
{-
   local variables for Expr.Boolexpr:
      pptex
      judge

-}
{-
   local variables for Expr.Ident:
      tp'
      errmsg
      tp
      unq
      tree
      format
      pptex
      judgespec
      judge

-}
{-
   local variables for Expr.If:
      resSubst
      resType
      ifErr
      condSubst
      condType
      condErr
      pptex
      judge

-}
{-
   local variables for Expr.Intexpr:
      pptex
      judge

-}
{-
   local variables for Expr.Lam:
      argErr
      bodyErr
      argTypes
      pptex
      newgamma
      judge

-}
{-
   local variables for Expr.Lamcall:

-}
{-
   local variables for Expr.Let:
      pptex
      judge

-}
{-
   local variables for Expr.Op:
      lerr
      rerr
      areErrs
      rSubs
      reType
      lSubs
      leType
      opType
      pptex
      judge

-}
{-
   local variables for Expr.Seq:
      pptex
      judge

-}
{-
   local variables for Expr.Unit:
      pptex
      judge

-}
data Expr = Expr_Apply (Expr) (Expr)
          | Expr_Assign (String) (Expr)
          | Expr_Boolexpr (Bool)
          | Expr_Ident (String)
          | Expr_If (Expr) (Expr) (Expr)
          | Expr_Intexpr (Int)
          | Expr_Lam (Vars) (Expr)
          | Expr_Lamcall (Expr)
          | Expr_Let (Decls) (Expr)
          | Expr_Op (String) (Expr) (Expr)
          | Expr_Seq (Exprs)
          | Expr_Unit 
-- semantic domain
type T_Expr = (Subst) ->
              (String) ->
              (Assumptions) ->
              (Gamma) ->
              (Gammas) ->
              (Assumptions) ->
              (Gamma) ->
              (Subst) ->
              (Int) ->
              ( (Gammas),(Gamma),(PP_Doc),(PP_Doc),(Subst),(Type),(PP_Doc),(Int))
-- cata
sem_Expr :: (Expr) ->
            (T_Expr)
sem_Expr ((Expr_Apply (_func) (_arg))) =
    (sem_Expr_Apply ((sem_Expr (_func))) ((sem_Expr (_arg))))
sem_Expr ((Expr_Assign (_var) (_expr))) =
    (sem_Expr_Assign (_var) ((sem_Expr (_expr))))
sem_Expr ((Expr_Boolexpr (_bool))) =
    (sem_Expr_Boolexpr (_bool))
sem_Expr ((Expr_Ident (_var))) =
    (sem_Expr_Ident (_var))
sem_Expr ((Expr_If (_cond) (_thenExpr) (_elseExpr))) =
    (sem_Expr_If ((sem_Expr (_cond))) ((sem_Expr (_thenExpr))) ((sem_Expr (_elseExpr))))
sem_Expr ((Expr_Intexpr (_int))) =
    (sem_Expr_Intexpr (_int))
sem_Expr ((Expr_Lam (_vars) (_expr))) =
    (sem_Expr_Lam ((sem_Vars (_vars))) ((sem_Expr (_expr))))
sem_Expr ((Expr_Lamcall (_call))) =
    (sem_Expr_Lamcall ((sem_Expr (_call))))
sem_Expr ((Expr_Let (_decls) (_expr))) =
    (sem_Expr_Let ((sem_Decls (_decls))) ((sem_Expr (_expr))))
sem_Expr ((Expr_Op (_op) (_le) (_re))) =
    (sem_Expr_Op (_op) ((sem_Expr (_le))) ((sem_Expr (_re))))
sem_Expr ((Expr_Seq (_exprs))) =
    (sem_Expr_Seq ((sem_Exprs (_exprs))))
sem_Expr ((Expr_Unit )) =
    (sem_Expr_Unit )
sem_Expr_Apply :: (T_Expr) ->
                  (T_Expr) ->
                  (T_Expr)
sem_Expr_Apply (func_) (arg_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            _funcIgammas :: (Gammas)
            _funcInextGamma :: (Gamma)
            _funcIpp :: (PP_Doc)
            _funcIpptex :: (PP_Doc)
            _funcIsubst :: (Subst)
            _funcItp :: (Type)
            _funcItree :: (PP_Doc)
            _funcIunique :: (Int)
            _funcOfinalSubst :: (Subst)
            _funcOformat :: (String)
            _funcOgamma :: (Assumptions)
            _funcOgammaId :: (Gamma)
            _funcOgammas :: (Gammas)
            _funcOjgamma :: (Assumptions)
            _funcOnextGamma :: (Gamma)
            _funcOsubst :: (Subst)
            _funcOunique :: (Int)
            _argIgammas :: (Gammas)
            _argInextGamma :: (Gamma)
            _argIpp :: (PP_Doc)
            _argIpptex :: (PP_Doc)
            _argIsubst :: (Subst)
            _argItp :: (Type)
            _argItree :: (PP_Doc)
            _argIunique :: (Int)
            _argOfinalSubst :: (Subst)
            _argOformat :: (String)
            _argOgamma :: (Assumptions)
            _argOgammaId :: (Gamma)
            _argOgammas :: (Gammas)
            _argOjgamma :: (Assumptions)
            _argOnextGamma :: (Gamma)
            _argOsubst :: (Subst)
            _argOunique :: (Int)
            ( _funcIgammas,_funcInextGamma,_funcIpp,_funcIpptex,_funcIsubst,_funcItp,_funcItree,_funcIunique) =
                (func_ (_funcOfinalSubst) (_funcOformat) (_funcOgamma) (_funcOgammaId) (_funcOgammas) (_funcOjgamma) (_funcOnextGamma) (_funcOsubst) (_funcOunique))
            ( _argIgammas,_argInextGamma,_argIpp,_argIpptex,_argIsubst,_argItp,_argItree,_argIunique) =
                (arg_ (_argOfinalSubst) (_argOformat) (_argOgamma) (_argOgammaId) (_argOgammas) (_argOjgamma) (_argOnextGamma) (_argOsubst) (_argOunique))
            -- "./SLPrettyprint.ag"(line 16, column 15)
            (_lhsOpp@_) =
                pp_parens (_funcIpp >|<  _funcErr)
                  >#< pp_parens (_argIpp >|<  _argErr)
            -- "./SLTypeInference.ag"(line 58, column 17)
            (_lhsOsubst@_) =
                _newSubs  |||  _argIsubst
            -- "./SLTypeInference.ag"(line 57, column 17)
            (_lhsOtp@_) =
                _tp
            -- "./SLTypeInference.ag"(line 56, column 21)
            ((_tp@_,_funcErr@_)) =
                getErrorMsg (getResultType  _funcType)
            -- "./SLTypeInference.ag"(line 54, column 21)
            ((_newSubs@_,_funcType@_,_argErr@_)) =
                unifyMsg (_argIsubst |=>  _funcItp)
                         (_argItp `arrow` (TVar  _lhsIunique))
            -- "./SLTypeInference.ag"(line 53, column 17)
            (_funcOunique@_) =
                _lhsIunique + 1
            -- "./SLProofTree.ag"(line 37, column 19)
            (_lhsOtree@_) =
                over   _lhsIformat [_funcItree,  _argItree]
                      "ApplyText"  _judge
            -- "./SLFormat.ag"(line 14, column 12)
            (_argOformat@_) =
                ("r")
            -- "./SLFormat.ag"(line 13, column 12)
            (_funcOformat@_) =
                ("n")
            -- "./SLPrettyprintTex.ag"(line 17, column 17)
            (_pptex@_) =
                pp_parens  _funcIpptex >##< pp_parens  _argIpptex
            -- "./SLJudgements.ag"(line 79, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, _lhsIfinalSubst |=> _tp)
            -- copy rule (up)
            (_lhsOgammas@_) =
                _argIgammas
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _argInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (up)
            (_lhsOunique@_) =
                _argIunique
            -- copy rule (down)
            (_funcOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_funcOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_funcOgammaId@_) =
                _lhsIgammaId
            -- copy rule (down)
            (_funcOgammas@_) =
                _lhsIgammas
            -- copy rule (down)
            (_funcOjgamma@_) =
                _lhsIjgamma
            -- copy rule (down)
            (_funcOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (down)
            (_funcOsubst@_) =
                _lhsIsubst
            -- copy rule (down)
            (_argOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_argOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_argOgammaId@_) =
                _lhsIgammaId
            -- copy rule (chain)
            (_argOgammas@_) =
                _funcIgammas
            -- copy rule (down)
            (_argOjgamma@_) =
                _lhsIjgamma
            -- copy rule (chain)
            (_argOnextGamma@_) =
                _funcInextGamma
            -- copy rule (chain)
            (_argOsubst@_) =
                _funcIsubst
            -- copy rule (chain)
            (_argOunique@_) =
                _funcIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_Assign :: (String) ->
                   (T_Expr) ->
                   (T_Expr)
sem_Expr_Assign (var_) (expr_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            _exprIgammas :: (Gammas)
            _exprInextGamma :: (Gamma)
            _exprIpp :: (PP_Doc)
            _exprIpptex :: (PP_Doc)
            _exprIsubst :: (Subst)
            _exprItp :: (Type)
            _exprItree :: (PP_Doc)
            _exprIunique :: (Int)
            _exprOfinalSubst :: (Subst)
            _exprOformat :: (String)
            _exprOgamma :: (Assumptions)
            _exprOgammaId :: (Gamma)
            _exprOgammas :: (Gammas)
            _exprOjgamma :: (Assumptions)
            _exprOnextGamma :: (Gamma)
            _exprOsubst :: (Subst)
            _exprOunique :: (Int)
            ( _exprIgammas,_exprInextGamma,_exprIpp,_exprIpptex,_exprIsubst,_exprItp,_exprItree,_exprIunique) =
                (expr_ (_exprOfinalSubst) (_exprOformat) (_exprOgamma) (_exprOgammaId) (_exprOgammas) (_exprOjgamma) (_exprOnextGamma) (_exprOsubst) (_exprOunique))
            -- "./SLPrettyprint.ag"(line 23, column 15)
            (_lhsOpp@_) =
                text  var_ >|<  _varErr >#< text ":=" >#<  _exprIpp >|<  _exprErr
            -- "./SLTypeInference.ag"(line 52, column 17)
            (_lhsOsubst@_) =
                _newSubs  |||  _exprIsubst
            -- "./SLTypeInference.ag"(line 50, column 21)
            ((_newSubs@_,_,_varErr@_)) =
                unifyMsg  (lookupVar  var_  _lhsIgamma)
                          (_exprItp)
            -- "./SLTypeInference.ag"(line 49, column 21)
            ((_exprTp@_,_exprErr@_)) =
                getErrorMsg _exprItp
            -- "./SLTypeInference.ag"(line 48, column 17)
            (_lhsOtp@_) =
                unittype
            -- "./SLProofTree.ag"(line 36, column 19)
            (_vartree@_) =
                over  _varformat [inGamma  _varjudge] "AssumptionText"  _varjudge
            -- "./SLProofTree.ag"(line 35, column 19)
            (_lhsOtree@_) =
                over   _lhsIformat [_vartree,_exprItree] "AssignText"  _judge
            -- "./SLFormat.ag"(line 20, column 12)
            (_varformat@_) =
                ("n")
            -- "./SLPrettyprintTex.ag"(line 16, column 17)
            (_pptex@_) =
                text  var_ >##< keyword ":=" >##<  _exprIpptex
            -- "./SLJudgements.ag"(line 78, column 15)
            (_varjudge@_) =
                (_lhsIgammaId, text var_, _lhsIfinalSubst |=> _exprItp)
            -- "./SLJudgements.ag"(line 77, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, unittype)
            -- copy rule (up)
            (_lhsOgammas@_) =
                _exprIgammas
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _exprInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (up)
            (_lhsOunique@_) =
                _exprIunique
            -- copy rule (down)
            (_exprOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_exprOformat@_) =
                _lhsIformat
            -- copy rule (down)
            (_exprOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_exprOgammaId@_) =
                _lhsIgammaId
            -- copy rule (down)
            (_exprOgammas@_) =
                _lhsIgammas
            -- copy rule (down)
            (_exprOjgamma@_) =
                _lhsIjgamma
            -- copy rule (down)
            (_exprOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (down)
            (_exprOsubst@_) =
                _lhsIsubst
            -- copy rule (down)
            (_exprOunique@_) =
                _lhsIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_Boolexpr :: (Bool) ->
                     (T_Expr)
sem_Expr_Boolexpr (bool_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            -- "./SLPrettyprint.ag"(line 13, column 15)
            (_lhsOpp@_) =
                text $ show  bool_
            -- "./SLTypeInference.ag"(line 24, column 17)
            (_lhsOtp@_) =
                booltype
            -- "./SLProofTree.ag"(line 24, column 19)
            (_lhsOtree@_) =
                over   _lhsIformat []
                      (if  bool_ then "TrueText" else "FalseText")  _judge
            -- "./SLPrettyprintTex.ag"(line 6, column 17)
            (_pptex@_) =
                text (show  bool_)
            -- "./SLJudgements.ag"(line 68, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, booltype)
            -- copy rule (chain)
            (_lhsOgammas@_) =
                _lhsIgammas
            -- copy rule (chain)
            (_lhsOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (chain)
            (_lhsOsubst@_) =
                _lhsIsubst
            -- copy rule (chain)
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_Ident :: (String) ->
                  (T_Expr)
sem_Expr_Ident (var_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            -- "./SLPrettyprint.ag"(line 14, column 15)
            (_lhsOpp@_) =
                text  var_ >|<  _errmsg
            -- "./SLTypeInference.ag"(line 30, column 17)
            (_lhsOunique@_) =
                _unq
            -- "./SLTypeInference.ag"(line 29, column 17)
            (_lhsOtp@_) =
                _tp'
            -- "./SLTypeInference.ag"(line 28, column 21)
            ((_tp'@_,_errmsg@_)) =
                getErrorMsg  _tp
            -- "./SLTypeInference.ag"(line 25, column 21)
            ((_tp@_,_unq@_)) =
                instantiate  _lhsIunique
                             (_lhsIsubst  |=>
                               (lookupVar  var_  _lhsIgamma))
            -- "./SLProofTree.ag"(line 29, column 19)
            (_tree@_) =
                over   _format [inGamma  _judge] "AssumptionText"  _judge
            -- "./SLProofTree.ag"(line 26, column 19)
            (_lhsOtree@_) =
                if  _unq ==  _lhsIunique
                  then  _tree
                  else over  _lhsIformat [_tree] "SpecializeText"  _judgespec
            -- "./SLFormat.ag"(line 8, column 12)
            (_format@_) =
                if  _unq ==  _lhsIunique
                  then  _lhsIformat
                                                  else "b"
            -- "./SLPrettyprintTex.ag"(line 7, column 17)
            (_pptex@_) =
                text  var_
            -- "./SLJudgements.ag"(line 70, column 15)
            (_judgespec@_) =
                (_lhsIgammaId, _pptex, _lhsIfinalSubst |=> _tp)
            -- "./SLJudgements.ag"(line 69, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, _lhsIfinalSubst |=> (lookupVar var_ _lhsIgamma))
            -- copy rule (chain)
            (_lhsOgammas@_) =
                _lhsIgammas
            -- copy rule (chain)
            (_lhsOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (chain)
            (_lhsOsubst@_) =
                _lhsIsubst
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_If :: (T_Expr) ->
               (T_Expr) ->
               (T_Expr) ->
               (T_Expr)
sem_Expr_If (cond_) (thenExpr_) (elseExpr_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            _condIgammas :: (Gammas)
            _condInextGamma :: (Gamma)
            _condIpp :: (PP_Doc)
            _condIpptex :: (PP_Doc)
            _condIsubst :: (Subst)
            _condItp :: (Type)
            _condItree :: (PP_Doc)
            _condIunique :: (Int)
            _condOfinalSubst :: (Subst)
            _condOformat :: (String)
            _condOgamma :: (Assumptions)
            _condOgammaId :: (Gamma)
            _condOgammas :: (Gammas)
            _condOjgamma :: (Assumptions)
            _condOnextGamma :: (Gamma)
            _condOsubst :: (Subst)
            _condOunique :: (Int)
            _thenExprIgammas :: (Gammas)
            _thenExprInextGamma :: (Gamma)
            _thenExprIpp :: (PP_Doc)
            _thenExprIpptex :: (PP_Doc)
            _thenExprIsubst :: (Subst)
            _thenExprItp :: (Type)
            _thenExprItree :: (PP_Doc)
            _thenExprIunique :: (Int)
            _thenExprOfinalSubst :: (Subst)
            _thenExprOformat :: (String)
            _thenExprOgamma :: (Assumptions)
            _thenExprOgammaId :: (Gamma)
            _thenExprOgammas :: (Gammas)
            _thenExprOjgamma :: (Assumptions)
            _thenExprOnextGamma :: (Gamma)
            _thenExprOsubst :: (Subst)
            _thenExprOunique :: (Int)
            _elseExprIgammas :: (Gammas)
            _elseExprInextGamma :: (Gamma)
            _elseExprIpp :: (PP_Doc)
            _elseExprIpptex :: (PP_Doc)
            _elseExprIsubst :: (Subst)
            _elseExprItp :: (Type)
            _elseExprItree :: (PP_Doc)
            _elseExprIunique :: (Int)
            _elseExprOfinalSubst :: (Subst)
            _elseExprOformat :: (String)
            _elseExprOgamma :: (Assumptions)
            _elseExprOgammaId :: (Gamma)
            _elseExprOgammas :: (Gammas)
            _elseExprOjgamma :: (Assumptions)
            _elseExprOnextGamma :: (Gamma)
            _elseExprOsubst :: (Subst)
            _elseExprOunique :: (Int)
            ( _condIgammas,_condInextGamma,_condIpp,_condIpptex,_condIsubst,_condItp,_condItree,_condIunique) =
                (cond_ (_condOfinalSubst) (_condOformat) (_condOgamma) (_condOgammaId) (_condOgammas) (_condOjgamma) (_condOnextGamma) (_condOsubst) (_condOunique))
            ( _thenExprIgammas,_thenExprInextGamma,_thenExprIpp,_thenExprIpptex,_thenExprIsubst,_thenExprItp,_thenExprItree,_thenExprIunique) =
                (thenExpr_ (_thenExprOfinalSubst) (_thenExprOformat) (_thenExprOgamma) (_thenExprOgammaId) (_thenExprOgammas) (_thenExprOjgamma) (_thenExprOnextGamma) (_thenExprOsubst) (_thenExprOunique))
            ( _elseExprIgammas,_elseExprInextGamma,_elseExprIpp,_elseExprIpptex,_elseExprIsubst,_elseExprItp,_elseExprItree,_elseExprIunique) =
                (elseExpr_ (_elseExprOfinalSubst) (_elseExprOformat) (_elseExprOgamma) (_elseExprOgammaId) (_elseExprOgammas) (_elseExprOjgamma) (_elseExprOnextGamma) (_elseExprOsubst) (_elseExprOunique))
            -- "./SLPrettyprint.ag"(line 21, column 15)
            (_lhsOpp@_) =
                pp_ite "if " " then " " else " " fi"
                  (_condIpp >|<  _condErr)  _thenExprIpp (_elseExprIpp >|<  _ifErr)
            -- "./SLTypeInference.ag"(line 46, column 17)
            (_lhsOtp@_) =
                _resType
            -- "./SLTypeInference.ag"(line 45, column 17)
            (_lhsOsubst@_) =
                _resSubst  |||  _elseExprIsubst
            -- "./SLTypeInference.ag"(line 43, column 21)
            ((_resSubst@_,_resType@_,_ifErr@_)) =
                unifyMsg  (_elseExprIsubst  |=>  _thenExprItp)
                          _elseExprItp
            -- "./SLTypeInference.ag"(line 42, column 17)
            (_thenExprOsubst@_) =
                _condSubst  |||  _condIsubst
            -- "./SLTypeInference.ag"(line 41, column 21)
            ((_condSubst@_,_condType@_,_condErr@_)) =
                unifyMsg booltype  _condItp
            -- "./SLProofTree.ag"(line 31, column 19)
            (_lhsOtree@_) =
                over   _lhsIformat [_condItree, _thenExprItree, _elseExprItree]
                      "CondText"  _judge
            -- "./SLFormat.ag"(line 17, column 16)
            (_elseExprOformat@_) =
                ("r")
            -- "./SLFormat.ag"(line 16, column 12)
            (_thenExprOformat@_) =
                ("n")
            -- "./SLFormat.ag"(line 15, column 12)
            (_condOformat@_) =
                ("n")
            -- "./SLPrettyprintTex.ag"(line 9, column 17)
            (_pptex@_) =
                keyword "if" >##<  _condIpptex >##<
                keyword "then" >##<  _thenExprIpptex >##<
                keyword "else" >##<  _elseExprIpptex >##<
                keyword "fi"
            -- "./SLJudgements.ag"(line 72, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, _lhsIfinalSubst |=> _resType)
            -- copy rule (up)
            (_lhsOgammas@_) =
                _elseExprIgammas
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _elseExprInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (up)
            (_lhsOunique@_) =
                _elseExprIunique
            -- copy rule (down)
            (_condOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_condOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_condOgammaId@_) =
                _lhsIgammaId
            -- copy rule (down)
            (_condOgammas@_) =
                _lhsIgammas
            -- copy rule (down)
            (_condOjgamma@_) =
                _lhsIjgamma
            -- copy rule (down)
            (_condOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (down)
            (_condOsubst@_) =
                _lhsIsubst
            -- copy rule (down)
            (_condOunique@_) =
                _lhsIunique
            -- copy rule (down)
            (_thenExprOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_thenExprOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_thenExprOgammaId@_) =
                _lhsIgammaId
            -- copy rule (chain)
            (_thenExprOgammas@_) =
                _condIgammas
            -- copy rule (down)
            (_thenExprOjgamma@_) =
                _lhsIjgamma
            -- copy rule (chain)
            (_thenExprOnextGamma@_) =
                _condInextGamma
            -- copy rule (chain)
            (_thenExprOunique@_) =
                _condIunique
            -- copy rule (down)
            (_elseExprOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_elseExprOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_elseExprOgammaId@_) =
                _lhsIgammaId
            -- copy rule (chain)
            (_elseExprOgammas@_) =
                _thenExprIgammas
            -- copy rule (down)
            (_elseExprOjgamma@_) =
                _lhsIjgamma
            -- copy rule (chain)
            (_elseExprOnextGamma@_) =
                _thenExprInextGamma
            -- copy rule (chain)
            (_elseExprOsubst@_) =
                _thenExprIsubst
            -- copy rule (chain)
            (_elseExprOunique@_) =
                _thenExprIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_Intexpr :: (Int) ->
                    (T_Expr)
sem_Expr_Intexpr (int_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            -- "./SLPrettyprint.ag"(line 12, column 15)
            (_lhsOpp@_) =
                text $ show  int_
            -- "./SLTypeInference.ag"(line 23, column 17)
            (_lhsOtp@_) =
                inttype
            -- "./SLProofTree.ag"(line 23, column 19)
            (_lhsOtree@_) =
                over   _lhsIformat [] "IntegerText"  _judge
            -- "./SLPrettyprintTex.ag"(line 5, column 17)
            (_pptex@_) =
                text (show  int_)
            -- "./SLJudgements.ag"(line 67, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, inttype)
            -- copy rule (chain)
            (_lhsOgammas@_) =
                _lhsIgammas
            -- copy rule (chain)
            (_lhsOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (chain)
            (_lhsOsubst@_) =
                _lhsIsubst
            -- copy rule (chain)
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_Lam :: (T_Vars) ->
                (T_Expr) ->
                (T_Expr)
sem_Expr_Lam (vars_) (expr_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            _varsIgamma :: (Assumptions)
            _varsIpp :: (PP_Doc)
            _varsIpptex :: (PP_Doc)
            _varsItps :: (Types)
            _varsIunique :: (Int)
            _varsIvals :: (Vars)
            _varsOgamma :: (Assumptions)
            _varsOunique :: (Int)
            _exprIgammas :: (Gammas)
            _exprInextGamma :: (Gamma)
            _exprIpp :: (PP_Doc)
            _exprIpptex :: (PP_Doc)
            _exprIsubst :: (Subst)
            _exprItp :: (Type)
            _exprItree :: (PP_Doc)
            _exprIunique :: (Int)
            _exprOfinalSubst :: (Subst)
            _exprOformat :: (String)
            _exprOgamma :: (Assumptions)
            _exprOgammaId :: (Gamma)
            _exprOgammas :: (Gammas)
            _exprOjgamma :: (Assumptions)
            _exprOnextGamma :: (Gamma)
            _exprOsubst :: (Subst)
            _exprOunique :: (Int)
            ( _varsIgamma,_varsIpp,_varsIpptex,_varsItps,_varsIunique,_varsIvals) =
                (vars_ (_varsOgamma) (_varsOunique))
            ( _exprIgammas,_exprInextGamma,_exprIpp,_exprIpptex,_exprIsubst,_exprItp,_exprItree,_exprIunique) =
                (expr_ (_exprOfinalSubst) (_exprOformat) (_exprOgamma) (_exprOgammaId) (_exprOgammas) (_exprOjgamma) (_exprOnextGamma) (_exprOsubst) (_exprOunique))
            -- "./SLPrettyprint.ag"(line 25, column 15)
            (_lhsOpp@_) =
                text "\\" >#<  _varsIpp >|<  _argErr >#< text "->"
                  >#<  _exprIpp >|<  _bodyErr
            -- "./SLTypeInference.ag"(line 62, column 17)
            (_argErr@_) =
                empty
            -- "./SLTypeInference.ag"(line 61, column 17)
            (_bodyErr@_) =
                empty
            -- "./SLTypeInference.ag"(line 60, column 17)
            (_lhsOtp@_) =
                foldr arrow  _exprItp  _argTypes
            -- "./SLTypeInference.ag"(line 59, column 17)
            (_argTypes@_) =
                map (_exprIsubst |=>)  _varsItps
            -- "./SLProofTree.ag"(line 40, column 19)
            (_lhsOtree@_) =
                over   _lhsIformat [_exprItree]
                        "FuncIntroText"   _judge
            -- "./SLFormat.ag"(line 19, column 12)
            (_exprOformat@_) =
                ("b")
            -- "./SLPrettyprintTex.ag"(line 18, column 17)
            (_pptex@_) =
                text "\\lambda" >#<  _varsIpptex >##<
                text "\\rightarrow" >##<  _exprIpptex
            -- "./SLJudgements.ag"(line 85, column 15)
            (_exprOgammaId@_) =
                _lhsInextGamma
            -- "./SLJudgements.ag"(line 84, column 15)
            (_exprOnextGamma@_) =
                _lhsInextGamma + 1
            -- "./SLJudgements.ag"(line 83, column 15)
            (_exprOgammas@_) =
                _lhsIgammas ++ [(_lhsInextGamma, _newgamma)]
            -- "./SLJudgements.ag"(line 82, column 15)
            (_exprOjgamma@_) =
                _newgamma
            -- "./SLJudgements.ag"(line 81, column 15)
            (_newgamma@_) =
                zip _varsIvals _varsItps ++ _lhsIjgamma
            -- "./SLJudgements.ag"(line 80, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, _lhsIfinalSubst |=> (foldr arrow _exprItp _argTypes))
            -- copy rule (up)
            (_lhsOgammas@_) =
                _exprIgammas
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _exprInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (up)
            (_lhsOsubst@_) =
                _exprIsubst
            -- copy rule (up)
            (_lhsOunique@_) =
                _exprIunique
            -- copy rule (down)
            (_varsOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_varsOunique@_) =
                _lhsIunique
            -- copy rule (down)
            (_exprOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (chain)
            (_exprOgamma@_) =
                _varsIgamma
            -- copy rule (down)
            (_exprOsubst@_) =
                _lhsIsubst
            -- copy rule (chain)
            (_exprOunique@_) =
                _varsIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_Lamcall :: (T_Expr) ->
                    (T_Expr)
sem_Expr_Lamcall (call_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            _callIgammas :: (Gammas)
            _callInextGamma :: (Gamma)
            _callIpp :: (PP_Doc)
            _callIpptex :: (PP_Doc)
            _callIsubst :: (Subst)
            _callItp :: (Type)
            _callItree :: (PP_Doc)
            _callIunique :: (Int)
            _callOfinalSubst :: (Subst)
            _callOformat :: (String)
            _callOgamma :: (Assumptions)
            _callOgammaId :: (Gamma)
            _callOgammas :: (Gammas)
            _callOjgamma :: (Assumptions)
            _callOnextGamma :: (Gamma)
            _callOsubst :: (Subst)
            _callOunique :: (Int)
            ( _callIgammas,_callInextGamma,_callIpp,_callIpptex,_callIsubst,_callItp,_callItree,_callIunique) =
                (call_ (_callOfinalSubst) (_callOformat) (_callOgamma) (_callOgammaId) (_callOgammas) (_callOjgamma) (_callOnextGamma) (_callOsubst) (_callOunique))
            -- "./SLProofTree.ag"(line 39, column 19)
            (_lhsOtree@_) =
                _callItree
            -- copy rule (up)
            (_lhsOgammas@_) =
                _callIgammas
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _callInextGamma
            -- copy rule (up)
            (_lhsOpp@_) =
                _callIpp
            -- copy rule (up)
            (_lhsOpptex@_) =
                _callIpptex
            -- copy rule (up)
            (_lhsOsubst@_) =
                _callIsubst
            -- copy rule (up)
            (_lhsOtp@_) =
                _callItp
            -- copy rule (up)
            (_lhsOunique@_) =
                _callIunique
            -- copy rule (down)
            (_callOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_callOformat@_) =
                _lhsIformat
            -- copy rule (down)
            (_callOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_callOgammaId@_) =
                _lhsIgammaId
            -- copy rule (down)
            (_callOgammas@_) =
                _lhsIgammas
            -- copy rule (down)
            (_callOjgamma@_) =
                _lhsIjgamma
            -- copy rule (down)
            (_callOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (down)
            (_callOsubst@_) =
                _lhsIsubst
            -- copy rule (down)
            (_callOunique@_) =
                _lhsIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_Let :: (T_Decls) ->
                (T_Expr) ->
                (T_Expr)
sem_Expr_Let (decls_) (expr_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            _declsIgamma :: (Assumptions)
            _declsIgammas :: (Gammas)
            _declsIjgamma :: (Assumptions)
            _declsInextGamma :: (Gamma)
            _declsIpps :: ([PP_Doc])
            _declsIpptexs :: (PP_Docs)
            _declsIsubst :: (Subst)
            _declsItrees :: (PP_Docs)
            _declsIunique :: (Int)
            _declsOfinalSubst :: (Subst)
            _declsOgamma :: (Assumptions)
            _declsOgammaId :: (Gamma)
            _declsOgammas :: (Gammas)
            _declsOjgamma :: (Assumptions)
            _declsOnextGamma :: (Gamma)
            _declsOsubst :: (Subst)
            _declsOunique :: (Int)
            _exprIgammas :: (Gammas)
            _exprInextGamma :: (Gamma)
            _exprIpp :: (PP_Doc)
            _exprIpptex :: (PP_Doc)
            _exprIsubst :: (Subst)
            _exprItp :: (Type)
            _exprItree :: (PP_Doc)
            _exprIunique :: (Int)
            _exprOfinalSubst :: (Subst)
            _exprOformat :: (String)
            _exprOgamma :: (Assumptions)
            _exprOgammaId :: (Gamma)
            _exprOgammas :: (Gammas)
            _exprOjgamma :: (Assumptions)
            _exprOnextGamma :: (Gamma)
            _exprOsubst :: (Subst)
            _exprOunique :: (Int)
            ( _declsIgamma,_declsIgammas,_declsIjgamma,_declsInextGamma,_declsIpps,_declsIpptexs,_declsIsubst,_declsItrees,_declsIunique) =
                (decls_ (_declsOfinalSubst) (_declsOgamma) (_declsOgammaId) (_declsOgammas) (_declsOjgamma) (_declsOnextGamma) (_declsOsubst) (_declsOunique))
            ( _exprIgammas,_exprInextGamma,_exprIpp,_exprIpptex,_exprIsubst,_exprItp,_exprItree,_exprIunique) =
                (expr_ (_exprOfinalSubst) (_exprOformat) (_exprOgamma) (_exprOgammaId) (_exprOgammas) (_exprOjgamma) (_exprOnextGamma) (_exprOsubst) (_exprOunique))
            -- "./SLPrettyprint.ag"(line 18, column 15)
            (_lhsOpp@_) =
                text  "let" >|< pp_block "" "" "; "  _declsIpps
                  >-< " in" >#< _exprIpp
                  >-< " ni"
            -- "./SLTypeInference.ag"(line 47, column 17)
            (_lhsOtp@_) =
                _exprItp
            -- "./SLProofTree.ag"(line 33, column 19)
            (_lhsOtree@_) =
                over   _lhsIformat (_declsItrees ++ [_exprItree])
                      "LetText"  _judge
            -- "./SLFormat.ag"(line 18, column 12)
            (_exprOformat@_) =
                ("r")
            -- "./SLPrettyprintTex.ag"(line 13, column 17)
            (_pptex@_) =
                keyword "let" >##< (pp_block "" "" "; "  _declsIpptexs) >##<
                keyword "in" >##<  _exprIpptex >##<
                keyword "ni"
            -- "./SLJudgements.ag"(line 76, column 15)
            (_exprOgammaId@_) =
                _declsInextGamma
            -- "./SLJudgements.ag"(line 75, column 15)
            (_exprOnextGamma@_) =
                _declsInextGamma + 1
            -- "./SLJudgements.ag"(line 74, column 15)
            (_exprOgammas@_) =
                _declsIgammas ++ [(_declsInextGamma, _declsIjgamma)]
            -- "./SLJudgements.ag"(line 73, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, _lhsIfinalSubst |=> _exprItp)
            -- copy rule (up)
            (_lhsOgammas@_) =
                _exprIgammas
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _exprInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (up)
            (_lhsOsubst@_) =
                _exprIsubst
            -- copy rule (up)
            (_lhsOunique@_) =
                _exprIunique
            -- copy rule (down)
            (_declsOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_declsOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_declsOgammaId@_) =
                _lhsIgammaId
            -- copy rule (down)
            (_declsOgammas@_) =
                _lhsIgammas
            -- copy rule (down)
            (_declsOjgamma@_) =
                _lhsIjgamma
            -- copy rule (down)
            (_declsOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (down)
            (_declsOsubst@_) =
                _lhsIsubst
            -- copy rule (down)
            (_declsOunique@_) =
                _lhsIunique
            -- copy rule (down)
            (_exprOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (chain)
            (_exprOgamma@_) =
                _declsIgamma
            -- copy rule (chain)
            (_exprOjgamma@_) =
                _declsIjgamma
            -- copy rule (chain)
            (_exprOsubst@_) =
                _declsIsubst
            -- copy rule (chain)
            (_exprOunique@_) =
                _declsIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_Op :: (String) ->
               (T_Expr) ->
               (T_Expr) ->
               (T_Expr)
sem_Expr_Op (op_) (le_) (re_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            _leIgammas :: (Gammas)
            _leInextGamma :: (Gamma)
            _leIpp :: (PP_Doc)
            _leIpptex :: (PP_Doc)
            _leIsubst :: (Subst)
            _leItp :: (Type)
            _leItree :: (PP_Doc)
            _leIunique :: (Int)
            _leOfinalSubst :: (Subst)
            _leOformat :: (String)
            _leOgamma :: (Assumptions)
            _leOgammaId :: (Gamma)
            _leOgammas :: (Gammas)
            _leOjgamma :: (Assumptions)
            _leOnextGamma :: (Gamma)
            _leOsubst :: (Subst)
            _leOunique :: (Int)
            _reIgammas :: (Gammas)
            _reInextGamma :: (Gamma)
            _reIpp :: (PP_Doc)
            _reIpptex :: (PP_Doc)
            _reIsubst :: (Subst)
            _reItp :: (Type)
            _reItree :: (PP_Doc)
            _reIunique :: (Int)
            _reOfinalSubst :: (Subst)
            _reOformat :: (String)
            _reOgamma :: (Assumptions)
            _reOgammaId :: (Gamma)
            _reOgammas :: (Gammas)
            _reOjgamma :: (Assumptions)
            _reOnextGamma :: (Gamma)
            _reOsubst :: (Subst)
            _reOunique :: (Int)
            ( _leIgammas,_leInextGamma,_leIpp,_leIpptex,_leIsubst,_leItp,_leItree,_leIunique) =
                (le_ (_leOfinalSubst) (_leOformat) (_leOgamma) (_leOgammaId) (_leOgammas) (_leOjgamma) (_leOnextGamma) (_leOsubst) (_leOunique))
            ( _reIgammas,_reInextGamma,_reIpp,_reIpptex,_reIsubst,_reItp,_reItree,_reIunique) =
                (re_ (_reOfinalSubst) (_reOformat) (_reOgamma) (_reOgammaId) (_reOgammas) (_reOjgamma) (_reOnextGamma) (_reOsubst) (_reOunique))
            -- "./SLPrettyprint.ag"(line 15, column 15)
            (_lhsOpp@_) =
                _leIpp >#<  _lerr >#< text  op_ >#<  _rerr >#<  _reIpp
            -- "./SLTypeInference.ag"(line 40, column 17)
            (_lhsOsubst@_) =
                _lSubs  |||  _rSubs  |||  _reIsubst
            -- "./SLTypeInference.ag"(line 37, column 17)
            (_lhsOtp@_) =
                if  _areErrs
                  then anytype
                  else getResultType (getResultType  _opType)
            -- "./SLTypeInference.ag"(line 36, column 21)
            ((_lerr@_,_rerr@_,_areErrs@_)) =
                getOpErrors (_leType,_reType)
            -- "./SLTypeInference.ag"(line 34, column 21)
            ((_rSubs@_,_reType@_)) =
                unify  (getArgType (getResultType  _opType))
                       (_reItp)
            -- "./SLTypeInference.ag"(line 33, column 21)
            ((_lSubs@_,_leType@_)) =
                unify (getArgType  _opType) (_leItp)
            -- "./SLTypeInference.ag"(line 32, column 17)
            (_lhsOunique@_) =
                _lhsIunique + 1
            -- "./SLTypeInference.ag"(line 31, column 17)
            (_opType@_) =
                lookupVar  op_  _lhsIgamma
            -- "./SLProofTree.ag"(line 30, column 19)
            (_lhsOtree@_) =
                over   _lhsIformat [_leItree, _reItree] "OpText"  _judge
            -- "./SLFormat.ag"(line 12, column 12)
            (_reOformat@_) =
                ("r")
            -- "./SLFormat.ag"(line 11, column 12)
            (_leOformat@_) =
                ("n")
            -- "./SLPrettyprintTex.ag"(line 8, column 17)
            (_pptex@_) =
                _leIpptex >##< text (escape  op_) >##<  _reIpptex
            -- "./SLJudgements.ag"(line 71, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, _lhsIfinalSubst |=> (getResultType (getResultType _opType)))
            -- copy rule (up)
            (_lhsOgammas@_) =
                _reIgammas
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _reInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (down)
            (_leOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_leOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_leOgammaId@_) =
                _lhsIgammaId
            -- copy rule (down)
            (_leOgammas@_) =
                _lhsIgammas
            -- copy rule (down)
            (_leOjgamma@_) =
                _lhsIjgamma
            -- copy rule (down)
            (_leOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (down)
            (_leOsubst@_) =
                _lhsIsubst
            -- copy rule (down)
            (_leOunique@_) =
                _lhsIunique
            -- copy rule (down)
            (_reOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_reOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_reOgammaId@_) =
                _lhsIgammaId
            -- copy rule (chain)
            (_reOgammas@_) =
                _leIgammas
            -- copy rule (down)
            (_reOjgamma@_) =
                _lhsIjgamma
            -- copy rule (chain)
            (_reOnextGamma@_) =
                _leInextGamma
            -- copy rule (chain)
            (_reOsubst@_) =
                _leIsubst
            -- copy rule (chain)
            (_reOunique@_) =
                _leIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_Seq :: (T_Exprs) ->
                (T_Expr)
sem_Expr_Seq (exprs_) =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            _exprsIgammas :: (Gammas)
            _exprsInextGamma :: (Gamma)
            _exprsInil :: (Bool)
            _exprsIpps :: ([PP_Doc])
            _exprsIpptexs :: (PP_Docs)
            _exprsIsubst :: (Subst)
            _exprsItps :: (Types)
            _exprsItrees :: (PP_Docs)
            _exprsIunique :: (Int)
            _exprsOfinalSubst :: (Subst)
            _exprsOgamma :: (Assumptions)
            _exprsOgammaId :: (Gamma)
            _exprsOgammas :: (Gammas)
            _exprsOjgamma :: (Assumptions)
            _exprsOnextGamma :: (Gamma)
            _exprsOsubst :: (Subst)
            _exprsOunique :: (Int)
            ( _exprsIgammas,_exprsInextGamma,_exprsInil,_exprsIpps,_exprsIpptexs,_exprsIsubst,_exprsItps,_exprsItrees,_exprsIunique) =
                (exprs_ (_exprsOfinalSubst) (_exprsOgamma) (_exprsOgammaId) (_exprsOgammas) (_exprsOjgamma) (_exprsOnextGamma) (_exprsOsubst) (_exprsOunique))
            -- "./SLPrettyprint.ag"(line 24, column 15)
            (_lhsOpp@_) =
                pp_block "" "" "; " (_exprsIpps)
            -- "./SLTypeInference.ag"(line 63, column 17)
            (_lhsOtp@_) =
                if null  _exprsItps
                then anytype
                else last _exprsItps
            -- "./SLProofTree.ag"(line 42, column 19)
            (_lhsOtree@_) =
                over   _lhsIformat _exprsItrees "SeqText"  _judge
            -- "./SLPrettyprintTex.ag"(line 20, column 17)
            (_pptex@_) =
                pp_block "" "" "; "  _exprsIpptexs
            -- "./SLJudgements.ag"(line 86, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, _lhsIfinalSubst |=> (last _exprsItps))
            -- copy rule (up)
            (_lhsOgammas@_) =
                _exprsIgammas
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _exprsInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (up)
            (_lhsOsubst@_) =
                _exprsIsubst
            -- copy rule (up)
            (_lhsOunique@_) =
                _exprsIunique
            -- copy rule (down)
            (_exprsOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_exprsOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_exprsOgammaId@_) =
                _lhsIgammaId
            -- copy rule (down)
            (_exprsOgammas@_) =
                _lhsIgammas
            -- copy rule (down)
            (_exprsOjgamma@_) =
                _lhsIjgamma
            -- copy rule (down)
            (_exprsOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (down)
            (_exprsOsubst@_) =
                _lhsIsubst
            -- copy rule (down)
            (_exprsOunique@_) =
                _lhsIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
sem_Expr_Unit :: (T_Expr)
sem_Expr_Unit  =
    \ _lhsIfinalSubst
      _lhsIformat
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOsubst :: (Subst)
            _lhsOtp :: (Type)
            _lhsOtree :: (PP_Doc)
            _lhsOunique :: (Int)
            -- "./SLPrettyprint.ag"(line 11, column 15)
            (_lhsOpp@_) =
                text "()"
            -- "./SLTypeInference.ag"(line 22, column 17)
            (_lhsOtp@_) =
                unittype
            -- "./SLProofTree.ag"(line 22, column 19)
            (_lhsOtree@_) =
                over   _lhsIformat [] "UnitText"  _judge
            -- "./SLPrettyprintTex.ag"(line 4, column 17)
            (_pptex@_) =
                text "Unit"
            -- "./SLJudgements.ag"(line 66, column 15)
            (_judge@_) =
                (_lhsIgammaId, _pptex, unittype)
            -- copy rule (chain)
            (_lhsOgammas@_) =
                _lhsIgammas
            -- copy rule (chain)
            (_lhsOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (chain)
            (_lhsOsubst@_) =
                _lhsIsubst
            -- copy rule (chain)
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOpp,_lhsOpptex,_lhsOsubst,_lhsOtp,_lhsOtree,_lhsOunique)
-- Exprs -------------------------------------------------------
{-
   inherited attributes:
      finalSubst           : Subst
      gamma                : Assumptions
      gammaId              : Gamma
      jgamma               : Assumptions

   chained attributes:
      gammas               : Gammas
      nextGamma            : Gamma
      subst                : Subst
      unique               : Int

   synthesised attributes:
      nil                  : Bool
      pps                  : [PP_Doc]
      pptexs               : PP_Docs
      tps                  : Types
      trees                : PP_Docs

-}
{-
   local variables for Exprs.Cons:
      pptexs

-}
{-
   local variables for Exprs.Nil:
      pptexs

-}
type Exprs = [(Expr)]
-- semantic domain
type T_Exprs = (Subst) ->
               (Assumptions) ->
               (Gamma) ->
               (Gammas) ->
               (Assumptions) ->
               (Gamma) ->
               (Subst) ->
               (Int) ->
               ( (Gammas),(Gamma),(Bool),([PP_Doc]),(PP_Docs),(Subst),(Types),(PP_Docs),(Int))
-- cata
sem_Exprs :: (Exprs) ->
             (T_Exprs)
sem_Exprs (list) =
    (foldr (sem_Exprs_Cons) (sem_Exprs_Nil) ((map sem_Expr list)))
sem_Exprs_Cons :: (T_Expr) ->
                  (T_Exprs) ->
                  (T_Exprs)
sem_Exprs_Cons (hd_) (tl_) =
    \ _lhsIfinalSubst
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOnil :: (Bool)
            _lhsOpps :: ([PP_Doc])
            _lhsOpptexs :: (PP_Docs)
            _lhsOsubst :: (Subst)
            _lhsOtps :: (Types)
            _lhsOtrees :: (PP_Docs)
            _lhsOunique :: (Int)
            _hdIgammas :: (Gammas)
            _hdInextGamma :: (Gamma)
            _hdIpp :: (PP_Doc)
            _hdIpptex :: (PP_Doc)
            _hdIsubst :: (Subst)
            _hdItp :: (Type)
            _hdItree :: (PP_Doc)
            _hdIunique :: (Int)
            _hdOfinalSubst :: (Subst)
            _hdOformat :: (String)
            _hdOgamma :: (Assumptions)
            _hdOgammaId :: (Gamma)
            _hdOgammas :: (Gammas)
            _hdOjgamma :: (Assumptions)
            _hdOnextGamma :: (Gamma)
            _hdOsubst :: (Subst)
            _hdOunique :: (Int)
            _tlIgammas :: (Gammas)
            _tlInextGamma :: (Gamma)
            _tlInil :: (Bool)
            _tlIpps :: ([PP_Doc])
            _tlIpptexs :: (PP_Docs)
            _tlIsubst :: (Subst)
            _tlItps :: (Types)
            _tlItrees :: (PP_Docs)
            _tlIunique :: (Int)
            _tlOfinalSubst :: (Subst)
            _tlOgamma :: (Assumptions)
            _tlOgammaId :: (Gamma)
            _tlOgammas :: (Gammas)
            _tlOjgamma :: (Assumptions)
            _tlOnextGamma :: (Gamma)
            _tlOsubst :: (Subst)
            _tlOunique :: (Int)
            ( _hdIgammas,_hdInextGamma,_hdIpp,_hdIpptex,_hdIsubst,_hdItp,_hdItree,_hdIunique) =
                (hd_ (_hdOfinalSubst) (_hdOformat) (_hdOgamma) (_hdOgammaId) (_hdOgammas) (_hdOjgamma) (_hdOnextGamma) (_hdOsubst) (_hdOunique))
            ( _tlIgammas,_tlInextGamma,_tlInil,_tlIpps,_tlIpptexs,_tlIsubst,_tlItps,_tlItrees,_tlIunique) =
                (tl_ (_tlOfinalSubst) (_tlOgamma) (_tlOgammaId) (_tlOgammas) (_tlOjgamma) (_tlOnextGamma) (_tlOsubst) (_tlOunique))
            -- "./SLPrettyprint.ag"(line 41, column 15)
            (_lhsOpps@_) =
                _hdIpp :  _tlIpps
            -- "./SLTypeInference.ag"(line 69, column 17)
            (_lhsOtps@_) =
                _hdItp :  _tlItps
            -- "./SLProofTree.ag"(line 55, column 15)
            (_lhsOtrees@_) =
                _hdItree :  _tlItrees
            -- "./SLFormat.ag"(line 27, column 12)
            (_hdOformat@_) =
                if  _tlInil then "r" else "n"
            -- "./SLFormat.ag"(line 26, column 12)
            (_lhsOnil@_) =
                False
            -- "./SLPrettyprintTex.ag"(line 35, column 17)
            (_pptexs@_) =
                _hdIpptex :  _tlIpptexs
            -- copy rule (up)
            (_lhsOgammas@_) =
                _tlIgammas
            -- copy rule (up)
            (_lhsOnextGamma@_) =
                _tlInextGamma
            -- copy rule (from local)
            (_lhsOpptexs@_) =
                _pptexs
            -- copy rule (up)
            (_lhsOsubst@_) =
                _tlIsubst
            -- copy rule (up)
            (_lhsOunique@_) =
                _tlIunique
            -- copy rule (down)
            (_hdOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_hdOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_hdOgammaId@_) =
                _lhsIgammaId
            -- copy rule (down)
            (_hdOgammas@_) =
                _lhsIgammas
            -- copy rule (down)
            (_hdOjgamma@_) =
                _lhsIjgamma
            -- copy rule (down)
            (_hdOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (down)
            (_hdOsubst@_) =
                _lhsIsubst
            -- copy rule (down)
            (_hdOunique@_) =
                _lhsIunique
            -- copy rule (down)
            (_tlOfinalSubst@_) =
                _lhsIfinalSubst
            -- copy rule (down)
            (_tlOgamma@_) =
                _lhsIgamma
            -- copy rule (down)
            (_tlOgammaId@_) =
                _lhsIgammaId
            -- copy rule (chain)
            (_tlOgammas@_) =
                _hdIgammas
            -- copy rule (down)
            (_tlOjgamma@_) =
                _lhsIjgamma
            -- copy rule (chain)
            (_tlOnextGamma@_) =
                _hdInextGamma
            -- copy rule (chain)
            (_tlOsubst@_) =
                _hdIsubst
            -- copy rule (chain)
            (_tlOunique@_) =
                _hdIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOnil,_lhsOpps,_lhsOpptexs,_lhsOsubst,_lhsOtps,_lhsOtrees,_lhsOunique)
sem_Exprs_Nil :: (T_Exprs)
sem_Exprs_Nil  =
    \ _lhsIfinalSubst
      _lhsIgamma
      _lhsIgammaId
      _lhsIgammas
      _lhsIjgamma
      _lhsInextGamma
      _lhsIsubst
      _lhsIunique ->
        let _lhsOgammas :: (Gammas)
            _lhsOnextGamma :: (Gamma)
            _lhsOnil :: (Bool)
            _lhsOpps :: ([PP_Doc])
            _lhsOpptexs :: (PP_Docs)
            _lhsOsubst :: (Subst)
            _lhsOtps :: (Types)
            _lhsOtrees :: (PP_Docs)
            _lhsOunique :: (Int)
            -- "./SLPrettyprint.ag"(line 40, column 15)
            (_lhsOpps@_) =
                []
            -- "./SLTypeInference.ag"(line 70, column 17)
            (_lhsOtps@_) =
                []
            -- "./SLProofTree.ag"(line 54, column 15)
            (_lhsOtrees@_) =
                []
            -- "./SLFormat.ag"(line 25, column 12)
            (_lhsOnil@_) =
                True
            -- "./SLPrettyprintTex.ag"(line 34, column 17)
            (_pptexs@_) =
                []
            -- copy rule (chain)
            (_lhsOgammas@_) =
                _lhsIgammas
            -- copy rule (chain)
            (_lhsOnextGamma@_) =
                _lhsInextGamma
            -- copy rule (from local)
            (_lhsOpptexs@_) =
                _pptexs
            -- copy rule (chain)
            (_lhsOsubst@_) =
                _lhsIsubst
            -- copy rule (chain)
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOgammas,_lhsOnextGamma,_lhsOnil,_lhsOpps,_lhsOpptexs,_lhsOsubst,_lhsOtps,_lhsOtrees,_lhsOunique)
-- Root --------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      ppExpr               : PP_Doc
      proof                : PP_Doc
      tp                   : Type

-}
{-
   local variables for Root.Root:
      gentp
      genproof
      gammas
      judge

-}
data Root = Root_Root (Expr)
-- semantic domain
type T_Root = ( (PP_Doc),(PP_Doc),(Type))
-- cata
sem_Root :: (Root) ->
            (T_Root)
sem_Root ((Root_Root (_expr))) =
    (sem_Root_Root ((sem_Expr (_expr))))
sem_Root_Root :: (T_Expr) ->
                 (T_Root)
sem_Root_Root (expr_) =
    let _lhsOppExpr :: (PP_Doc)
        _lhsOproof :: (PP_Doc)
        _lhsOtp :: (Type)
        _exprIgammas :: (Gammas)
        _exprInextGamma :: (Gamma)
        _exprIpp :: (PP_Doc)
        _exprIpptex :: (PP_Doc)
        _exprIsubst :: (Subst)
        _exprItp :: (Type)
        _exprItree :: (PP_Doc)
        _exprIunique :: (Int)
        _exprOfinalSubst :: (Subst)
        _exprOformat :: (String)
        _exprOgamma :: (Assumptions)
        _exprOgammaId :: (Gamma)
        _exprOgammas :: (Gammas)
        _exprOjgamma :: (Assumptions)
        _exprOnextGamma :: (Gamma)
        _exprOsubst :: (Subst)
        _exprOunique :: (Int)
        ( _exprIgammas,_exprInextGamma,_exprIpp,_exprIpptex,_exprIsubst,_exprItp,_exprItree,_exprIunique) =
            (expr_ (_exprOfinalSubst) (_exprOformat) (_exprOgamma) (_exprOgammaId) (_exprOgammas) (_exprOjgamma) (_exprOnextGamma) (_exprOsubst) (_exprOunique))
        -- "./SLPrettyprint.ag"(line 8, column 10)
        (_lhsOppExpr@_) =
            _exprIpp
        -- "./SLTypeInference.ag"(line 18, column 11)
        (_exprOfinalSubst@_) =
            _exprIsubst
        -- "./SLTypeInference.ag"(line 17, column 11)
        (_lhsOtp@_) =
            abstract initgamma _exprItp
        -- "./SLTypeInference.ag"(line 16, column 11)
        (_exprOsubst@_) =
            emptysubst
        -- "./SLTypeInference.ag"(line 15, column 11)
        (_exprOunique@_) =
            1
        -- "./SLTypeInference.ag"(line 14, column 11)
        (_exprOgamma@_) =
            initgamma
        -- "./SLProofTree.ag"(line 18, column 11)
        (_gentp@_) =
            abstract initgamma  _exprItp
        -- "./SLProofTree.ag"(line 15, column 11)
        (_genproof@_) =
            case  _gentp of
              (TForall _ _)  -> over "n" [_exprItree] "GeneralizeText"  _judge
              _              -> _exprItree
        -- "./SLProofTree.ag"(line 13, column 11)
        (_lhsOproof@_) =
            header >-<
            document (landscape (mathmode  _genproof >-< ppTexGammas  _gammas))
        -- "./SLFormat.ag"(line 5, column 12)
        (_exprOformat@_) =
            ("b")
        -- "./SLJudgements.ag"(line 62, column 14)
        (_exprOgammaId@_) =
            1
        -- "./SLJudgements.ag"(line 61, column 14)
        (_exprOnextGamma@_) =
            2
        -- "./SLJudgements.ag"(line 60, column 14)
        (_exprOgammas@_) =
            [(1, [])]
        -- "./SLJudgements.ag"(line 59, column 14)
        (_exprOjgamma@_) =
            []
        -- "./SLJudgements.ag"(line 58, column 14)
        (_gammas@_) =
            map (\(x, y) -> (x, mapSnd (_exprIsubst |=> ) y)) _exprIgammas
        -- "./SLJudgements.ag"(line 57, column 14)
        (_judge@_) =
            (1, _exprIpptex, _gentp)
    in  ( _lhsOppExpr,_lhsOproof,_lhsOtp)
-- Vars --------------------------------------------------------
{-
   inherited attributes:

   chained attributes:
      gamma                : Assumptions
      unique               : Int

   synthesised attributes:
      pp                   : PP_Doc
      pptex                : PP_Doc
      tps                  : Types
      vals                 : Vars

-}
{-
   local variables for Vars.Cons:
      pptex

-}
{-
   local variables for Vars.Nil:
      pptex

-}
type Vars = [(String)]
-- semantic domain
type T_Vars = (Assumptions) ->
              (Int) ->
              ( (Assumptions),(PP_Doc),(PP_Doc),(Types),(Int),(Vars))
-- cata
sem_Vars :: (Vars) ->
            (T_Vars)
sem_Vars (list) =
    (foldr (sem_Vars_Cons) (sem_Vars_Nil) (list))
sem_Vars_Cons :: (String) ->
                 (T_Vars) ->
                 (T_Vars)
sem_Vars_Cons (hd_) (tl_) =
    \ _lhsIgamma
      _lhsIunique ->
        let _lhsOgamma :: (Assumptions)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOtps :: (Types)
            _lhsOunique :: (Int)
            _lhsOvals :: (Vars)
            _tlIgamma :: (Assumptions)
            _tlIpp :: (PP_Doc)
            _tlIpptex :: (PP_Doc)
            _tlItps :: (Types)
            _tlIunique :: (Int)
            _tlIvals :: (Vars)
            _tlOgamma :: (Assumptions)
            _tlOunique :: (Int)
            ( _tlIgamma,_tlIpp,_tlIpptex,_tlItps,_tlIunique,_tlIvals) =
                (tl_ (_tlOgamma) (_tlOunique))
            -- "./SLPrettyprint.ag"(line 45, column 15)
            (_lhsOpp@_) =
                text  hd_ >#<  _tlIpp
            -- "./SLTypeInference.ag"(line 92, column 11)
            (_lhsOtps@_) =
                TVar  _lhsIunique :  _tlItps
            -- "./SLTypeInference.ag"(line 91, column 11)
            (_tlOunique@_) =
                _lhsIunique + 1
            -- "./SLTypeInference.ag"(line 90, column 11)
            (_tlOgamma@_) =
                (hd_,TVar _lhsIunique ) :  _lhsIgamma
            -- "./SLPrettyprintTex.ag"(line 40, column 17)
            (_pptex@_) =
                text  hd_ >#<  _tlIpptex
            -- "./SLJudgements.ag"(line 101, column 15)
            (_lhsOvals@_) =
                hd_ : _tlIvals
            -- copy rule (up)
            (_lhsOgamma@_) =
                _tlIgamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (up)
            (_lhsOunique@_) =
                _tlIunique
        in  ( _lhsOgamma,_lhsOpp,_lhsOpptex,_lhsOtps,_lhsOunique,_lhsOvals)
sem_Vars_Nil :: (T_Vars)
sem_Vars_Nil  =
    \ _lhsIgamma
      _lhsIunique ->
        let _lhsOgamma :: (Assumptions)
            _lhsOpp :: (PP_Doc)
            _lhsOpptex :: (PP_Doc)
            _lhsOtps :: (Types)
            _lhsOunique :: (Int)
            _lhsOvals :: (Vars)
            -- "./SLPrettyprint.ag"(line 44, column 15)
            (_lhsOpp@_) =
                empty
            -- "./SLTypeInference.ag"(line 93, column 11)
            (_lhsOtps@_) =
                []
            -- "./SLPrettyprintTex.ag"(line 39, column 17)
            (_pptex@_) =
                empty
            -- "./SLJudgements.ag"(line 102, column 15)
            (_lhsOvals@_) =
                []
            -- copy rule (chain)
            (_lhsOgamma@_) =
                _lhsIgamma
            -- copy rule (from local)
            (_lhsOpptex@_) =
                _pptex
            -- copy rule (chain)
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOgamma,_lhsOpp,_lhsOpptex,_lhsOtps,_lhsOunique,_lhsOvals)


