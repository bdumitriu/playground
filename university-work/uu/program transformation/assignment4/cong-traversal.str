module cong-traversal
imports Tiger

strategies

one-Tiger(s) = Uminus(s) <+
	Plus(s, id) <+
	Plus(id, s) <+
	Times(s, id) <+
	Times(id, s)

some-Tiger(s) = Plus(s, s) <+
	Times(s, s) <+
	one-Tiger(s)

all-Tiger(s) = Uminus(s) <+
	Plus(s, s) <+
	Times(s, s) <+
	Int(id) <+
	Var(id)

topdown-Tiger(s) = s ; all-Tiger(topdown-Tiger(s))

bottomup-Tiger(s) = all-Tiger(bottomup-Tiger(s)) ; s

outermost-Tiger(s) = s <+ all-Tiger(outermost-Tiger(s))

innermost-Tiger(s) = some-Tiger(innermost-Tiger(s)) <+ s

// (A.1).1
cong1 = bottomup-Tiger(try((Var("x") -> Int("3"))))

// (A.1).2
cong2(|x) = bottomup-Tiger(try((Var("x") -> Int(<int-to-string>x))))

// (A.1).3
cong3 = bottomup-Tiger(try(\ Times(e, Int("2")) -> Plus(e, e) \ <+ \ Times(Int("2"), e) -> Plus(e, e)\))

// (A.1).4
cong4 = outermost-Tiger(\ Plus(x, y) -> Times(x, y) \)

// (A.1).5
cong5 = innermost-Tiger(\ Plus(x, y) -> Times(x, y) \)
