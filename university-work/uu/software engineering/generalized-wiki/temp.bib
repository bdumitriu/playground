@preamble{{\def\sortunder#1{}}}

@techreport{BV94,
  author      = {{\sortunder{Brand}}van den Brand, Mark G. J. and Visser, Eelco},
  title       = {From {Box} to {\TeX}: {An} algebraic approach to the generation of documentation tools},
  year        = {1994},
  month       = {July},
  number      = {P9420},
  institution = {Programming Research Group, University of Amsterdam},
  url         = {ftp://ftp.wins.uva.nl/pub/programming-research/reports/1994/P9420.ps.Z},
  abstract    = {We define a translation to \TeX. New in this approach is the typesetter.\par The \TeX\ generator, which translates the box language to \TeX\ code, is a component of documentation tools generated for the programming environments developed with the ASF+SDF meta-environment, but can also be used as a separate tool. As a case study, the construction of a typesetter for the process specification formalism PSF is shown.},
  urlpsgz     = {http://www.cs.uu.nl/people/visser/ftp/P9420.ps.gz},
  pubcat      = {techreport},
  project     = {SDF},
  urlbib      = {BV94.bib},
}


@article{BV96,
  author   = {{\sortunder{Brand}}van den Brand, Mark G. J. and Visser, Eelco},
  title    = {Generation of Formatters for Context-free Languages},
  journal  = {ACM Transactions on Software Engineering and Methodology},
  year     = {1996},
  month    = {January},
  volume   = {5},
  number   = {1},
  pages    = {1--41},
  urlacmdl = {http://www.acm.org/pubs/toc/TOC/1049-331X/Vol5.html},
  urlpsgz  = {http://www.cs.uu.nl/people/visser/ftp/BV96.ps.gz},
  pubcat   = {journal},
  project  = {Pretty-Printing},
  category = {key and refereed},
  urlbib   = {BV96.bib},
}

@techreport{DV01,
  author      = {Eelco Dolstra and Eelco Visser},
  title       = {First-class Rules and Generic Traversal},
  institution = {Institute of Information and Computing Sciences, Utrecht University},
  year        = {2001},
  number      = {UU-CS-2001-38},
  address     = {Utrecht, The Netherlands},
  urlpdf      = {http://www.cs.uu.nl/people/visser/ftp/DV01.pdf},
  pubcat      = {techreport},
  project     = {Stratego},
  category    = {},
  urlbib      = {DV01.bib},
}

@inproceedings{FV03.concretepl,
  author    = {Bernd Fischer and Eelco Visser},
  title     = {Adding Concrete Syntax to a {Prolog-based} Program Synthesis System (Extended Abstract)},
  booktitle = {Preproceedings of the International Symposium on Logic Based Program Synthesis and Transformation (LOPSTR'03)},
  pages     = {39--48},
  year      = {2003},
  editor    = {Maurice Bruynooghe},
  number    = {Report CW 365},
  address   = {Uppsala, Sweden},
  month     = {August},
  publisher = {Department of Computer Science, K. U. Leuven},
  urlinfo   = {http://www.stratego-language.org/Stratego/AddingConcreteSyntaxToAPrologBasedProgramSynthesisSystem},
  pubcat    = {conference and superseded},
  project   = {Stratego and XT and SDF},
  category  = {refereed},
  urlbib    = {FV03.concretepl.bib},
}

@incollection{FV04.retrofit,
  author      = {Bernd Fischer and Eelco Visser},
  title       = {Retrofitting the {AutoBayes} Program Synthesis System with Concrete Object Syntax},
  booktitle   = {Domain-Specific Program Generation},
  pages       = {239--253},
  year        = {2004},
  editor      = {C. Lengauer and others},
  volume      = {3016},
  series      = {Lecture Notes in Computer Science},
  publisher   = {Spinger-Verlag},
  pubcat      = {conference},
  url         = {http://www.cs.uu.nl/research/techreps/UU-CS-2004-012.html},
  urlpdf      = {http://archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2004/2004-012.pdf},
  urlinfo     = {http://www.stratego-language.org/Stratego/RetrofittingTheAutoBayesProgramSynthesisSystemWithConcreteSyntax},
  urlspringer = {http://www.springerlink.com/index/QMMTH1RULCME6JXC},
  project     = {Stratego and XT and SDF},
  category    = {refereed},
  urlbib      = {FV04.retrofit.bib},
}

@article{JV00,
  author   = {Johann, Patricia and Visser, Eelco},
  title    = {Warm Fusion in {Stratego}: {A} Case Study in the Generation of Program Transformation Systems},
  journal  = {Annals of Mathematics and Artificial Intelligence},
  year     = {2000},
  volume   = 29,
  number   = {1--4},
  pages    = {1--34},
  urlpsgz  = {http://www.cs.uu.nl/people/visser/ftp/JV2000-TR.ps.gz},
  pubcat   = {journal},
  project  = {Stratego},
  category = {refereed},
  urlbib   = {JV00.bib},
}

@techreport{JV03,
  author      = {Patricia Johann and Eelco Visser},
  title       = {Strategies for Fusing Logic and Control via Local, Application-Specific Transformations},
  institution = {Institute of Information and Computing Sciences, Utrecht University},
  year        = {2003},
  number      = {UU-CS-2003-050},
  month       = {February},
  url         = {http://www.cs.uu.nl/research/techreps/UU-CS-2003-050.html},
  urlinfo     = {http://www.stratego-language.org/Stratego/FusingLogicAndControl},
  urlpdf      = {http://archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2004/2003-50.pdf},
  project     = {Stratego},
  pubcat      = {tecnical report},
  category    = {},
  urlbib      = {JV03.bib},
}

@inproceedings{KV94,
  author    = {Klint, Paul and Visser, Eelco},
  title     = {Using Filters for the Disambiguation of Context-free Grammars},
  booktitle = {Proc. {ASMICS} Workshop on Parsing Theory},
  editor    = {Pighizzini, G. and {San Pietro}, P.},
  year      = {1994},
  month     = {October},
  pages     = {1--20},
  publisher = {Tech. Rep. 126--1994, Dipartimento di Scienze dell'Informazione, Universit\`a di Milano},
  address   = {Milano, Italy},
  pubcat    = {workshop},
  urlpsgz   = {http://www.cs.uu.nl/people/visser/ftp/P9426.ps.gz},
  urlpsz    = {ftp://ftp.wins.uva.nl/pub/programming-research/reports/1994/P9426.ps.Z},
  abstract  = {The existing methods can be divided in `parser specific' methods that describe how some parsing technique deals with ambiguous sentences and `logical' methods that describe the intended interpretation without reference to a specific parsing technique. We propose a framework of {\em filters\/} to describe and compare a wide range of disambiguation problems in a parser-independent way. A filter is a function that selects from a set of parse trees (the canonical representation of the interpretations of a sentence) the intended trees. Finally, a start is made with the study of efficient implementation techniques for filters by exploiting the commutativity of parsing steps and filter steps for certain classes of filters.},
  project   = {SDF},
  category  = {refereed},
  urlbib    = {KV94.bib},
}

@misc{PtWiki,
  author       = {Eelco Visser and others},
  title        = {{The Program Transformation Wiki}},
  howpublished = {\url{http://www.program-transformation.org}},
  project      = {Transformation Wiki},
  category     = {non-refereed},
  urlbib       = {PtWiki.bib},
}

@manual{StrategoDoc05,
  title        = {Stratego/XT Tutorial, Examples, and Reference Manual},
  optkey       = {},
  author       = {Martin Bravenboer and Karl Trygve Kalleberg and Rob Vermaas and Eelco Visser},
  organization = {Department of Information and Computing Sciences, Universiteit Utrecht},
  address      = {Utrecht, The Netherlands},
  optedition   = {},
  month        = {August},
  year         = {2005},
  note         = {(Draft)},
  optannote    = {},
  urlhtml      = {http://nix.cs.uu.nl/dist/stratego/strategoxt-manual-unstable-latest/manual/},
  project      = {Stratego and XT},
  category     = {documentation},
  pubcat       = {documentation},
  urlbib       = {StrategoDoc05.bib},
}

@incollection{Vis04.strategoxt,
  author      = {Eelco Visser},
  title       = {Program Transformation with {Stratego/XT}: Rules, Strategies, Tools, and Systems in {StrategoXT-0.9}},
  booktitle   = {Domain-Specific Program Generation},
  pages       = {216--238},
  year        = {2004},
  editor      = {C. Lengauer and others},
  volume      = {3016},
  series      = {Lecture Notes in Computer Science},
  month       = {June},
  publisher   = {Spinger-Verlag},
  url         = {http://www.cs.uu.nl/research/techreps/UU-CS-2004-011.html},
  urlpdf      = {http://archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2004/2004-011.pdf},
  urlinfo     = {http://www.stratego-language.org/Stratego/ProgramTransformationWithStrategoXT},
  urlspringer = {http://www.springerlink.com/index/MY9WE5TJ86U2F59N},
  pubcat      = {conference},
  project     = {Stratego and XT},
  category    = {key and refereed},
  urlbib      = {Vis04.strategoxt.bib},
}

@manual{Vis05-bibtextools,
  title        = {The {Stratego/XT} {BibTeX} Tools. {T}ool documentation},
  optkey       = {},
  author       = {Eelco Visser},
  organization = {Department of Information and Computing Sciences, Universiteit Utrecht},
  address      = {Utrecht, The Netherlands},
  edition      = {0.2pre12491},
  month        = {August},
  year         = {2005},
  note         = {(Draft)},
  optannote    = {},
  urlwiki      = {http://www.stratego-language.org/Stratego/BibtexTools},
  urlrelease   = {http://nix.cs.uu.nl/dist/stratego/bibtex-tools-unstable-latest},
  urlpdf       = {http://nix.cs.uu.nl/dist/stratego/bibtex-tools-unstable-latest/bibtex-tools.pdf},
  project      = {Stratego and XT},
  category     = {documentation},
  pubcat       = {documentation},
  urlbib       = {Vis05-bibtextools.bib},
}

@article{Vis05.survey,
  author       = {Eelco Visser},
  title        = {A Survey of Strategies in Rule-Based Program Transformation Systems},
  journal      = {Journal of Symbolic Computation},
  year         = {2005},
  volume       = 40,
  number       = 1,
  pages        = {831-873},
  urljsc       = {http://authors.elsevier.com/sd/article/S0747717105000349},
  urlinfo      = {http://www.program-transformation.org/Transform/ASurveyOfStrategiesInRuleBasedProgramTransformationSystems},
  urltr        = {http://www.cs.uu.nl/research/techreps/UU-CS-2005-006.html},
  urlpdf       = {http://archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2005/2005-022.pdf},
  backupurlpdf = {http://www.cs.uu.nl/~visser/ftp/UU-CS-2005-022.pdf},
  pubcat       = {journal},
  project      = {Stratego},
  category     = {key and refereed},
  doi          = {10.1016/j.jsc.2004.12.011},
  note         = {Special issue on Reduction Strategies in Rewriting and Programming},
  editor       = {Bernhard Gramlich and Salvador Lucas},
  class        = {Wet},
  urlbib       = {Vis05.survey.bib},
}

@unpublished{Vis92,
  author  = {Visser, Eelco},
  title   = {Syntax and Static Semantics of {E}iffel. {A} Case Study in Algebraic Specification Techniques},
  year    = {1992},
  month   = {December},
  address = {Programming Research Group, University of Amsterdam},
  note    = {Unpublished technical report},
  url     = {ftp://ftp.cwi.nl/pub/gipe/reports/Vis92.ps.Z},
  urlpsgz = {http://www.cs.uu.nl/people/visser/ftp/Vis92.ps.gz},
  pubcat  = {unpublished techreport},
  project = {ASF+SDF},
  urlbib  = {Vis92.bib},
}

@mastersthesis{Vis93,
  author   = {Visser, Eelco},
  title    = {Combinatory Algebraic Specification \& Compilation of List Matching},
  year     = {1993},
  month    = {June},
  school   = {Department of Computer Science, University of Amsterdam},
  address  = {Amsterdam},
  abstract = {In this thesis the transformation of conditional equational term rewrite systems with {\em associative lists} to term rewrite systems without lists is described by means of an algebraic specification. To make as much of the specification reusable the specification is written in a style called {\em Combinatory Algebraic Specification}. In this style it is possible to define polymorphic higher-order functions (or combinators) and use these as arguments to functions and as results of computations. Using this style a vast library of general purpose combinators is developed. The specification of the combinatory language, the library of combinators and the specification of the transformation are written in a {\em Literate Specification} style, meaning that the specification and the text explaining it are integrated.},
  urlpsgz  = {http://www.cs.uu.nl/people/visser/ftp/Vis93.ps.gz},
  url      = {http://www.wins.uva.nl/pub/programming-research/MasterTheses/visser.ps.Z},
  pubcat   = {mastersthesis},
  project  = {ASF+SDF},
  category = {non-refereed},
  urlbib   = {Vis93.bib},
}

@inproceedings{Vis95.acc,
  author       = {Visser, Eelco},
  title        = {A Case Study in Optimizing Parsing Schemata by Disambiguation Filters},
  booktitle    = {Proceedings Accolade95},
  editor       = {S. Fischer and M. Trautwein},
  year         = {1995},
  month        = {September},
  pages        = {153--167},
  organization = {The Dutch Graduate School in Logic},
  address      = {Amsterdam},
  pubcat       = {workshop and superseded},
  pubcat       = {published techreport},
  url          = {http://ftp.wins.uva.nl/pub/programming-research/reports/1995/P9507.ps.Z},
  abstract     = {A disambiguation filter is a function that selects a subset from a set of parse trees---the possible parse trees for an ambiguous sentence. The framework of filters provides a declarative description of disambiguation methods independent of parsing. Although filters can be implemented straightforwardly as functions that prune the parse forest produced by some generalized parser, this can be too inefficient for practical applications. As a case study the optimization of the parsing schema of Earley's parsing algorithm by two filters is investigated. The main result is a technique for generation of efficient LR-like parsers for ambiguous grammars modulo priorities.},
  project      = {SDF},
  category     = {refereed},
  urlbib       = {Vis95.acc.bib},
}

@inproceedings{Vis95.psd,
  author    = {Visser, Eelco},
  title     = {Polymorphic Syntax Definition (Extended Abstract)},
  booktitle = {Algebraic Methods in Language Processing (AMILP'95)},
  editor    = {A. {Nij\-holt} and G. Scollo and R. Steetskamp},
  year      = {1995},
  month     = {December},
  series    = {Twente Workshops in Language Technology},
  volume    = {10},
  pages     = {43--54},
  publisher = {Twente University of Technology},
  address   = {Enschede, The Netherlands},
  url       = {http://adam.wins.uva.nl/~visser/syntax/papers/psd/},
  abstract  = {Context-free grammars are used in several algebraic specification formalisms instead of first-order signatures for the definition of the structure of algebras, because grammars provide better notation than signatures. Two-level grammars are the grammatical counterpart of two-level signatures. This paper discusses the correspondence between context-free grammars and first-order signatures, the extension of these to two-level grammars and signatures and shows how two-level grammars can be used for polymorphic syntax definition and the problems there are for the usage of two-level grammars as signatures in algebraic specification formalisms.},
  urlpsgz   = {http://www.cs.uu.nl/~visser/ftp/Vis95-AMILP.ps.gz},
  pubcat    = {workshop and superseded},
  project   = {SDF},
  category  = {refereed},
  urlbib    = {Vis95.psd.bib},
}

@inproceedings{Vis95.sdf,
  author    = {Eelco Visser},
  title     = {A Family of Syntax Definition Formalisms},
  booktitle = {{ASF+SDF'95}. A Workshop on Generating Tools from Algebraic Specifications},
  editor    = {{\sortunder{Brand}}van den Brand, M. G. J. and others},
  year      = {1995},
  month     = {May},
  pages     = {89--126},
  publisher = {Technical Report P9504, Programming Research Group, University of Amsterdam},
  url       = {http://ftp.wins.uva.nl/pub/programming-research/reports/1995/P9504/7.html},
  abstract  = {The formalism is developed with the algebraic specification formalism ASF+SDF. It provides the following features: lexical and context-free syntax, variables, disambiguation by priorities, regular expressions, character classes and modular definitions. New are the uniform treatment of lexical syntax, context-free syntax and variables, the treatment of regular expressions by normalization yielding abstract syntax without auxiliary sorts, regular expressions as result of productions and modules with hidden imports and renamings.},
  urlpsgz   = {http://www.cs.uu.nl/people/visser/ftp/P9504.ps.gz},
  pubcat    = {workshop},
  project   = {ASF+SDF and SDF},
  category  = {refereed},
  urlbib    = {Vis95.sdf.bib},
}

@incollection{Vis96.mls,
  author    = {Visser, Eelco},
  title     = {Multi-Level Specifications},
  booktitle = {Language Prototyping. An Algebraic Specification Approach},
  editor    = {A. van Deursen and J. Heering and P. Klint},
  year      = {1996},
  month     = {September},
  series    = {AMAST Series in Computing},
  volume    = {5},
  pages     = {105--196},
  publisher = {World Scientific},
  address   = {Singapore},
  urlpsgz   = {http://www.cs.uu.nl/people/visser/ftp/P9604.ps.gz},
  url       = {http://adam.wins.uva.nl/~visser/types/mls/},
  abstract  = {Specifications consist of one or more levels numbered $0$ to $n$. Level~0 defines the object level terms. Level~1 defines the types used in the signature of level~0. In general, the terms used as types in level~$n$ are defined in level~$n+1$. This setup makes the algebra of types and the algebra of types of types, etc., user-definable. The applicative term structure makes functions first-class citizens and facilitates higher-order functions. The use of variables in terms used as types provides polymorphism (including higher-order polymorphism, i.e., abstraction over type constructors). Functions and variables can be overloaded. Specifications can be divided into modules. Modules can be imported at several levels by means of a specification lifting operation. Equations define the semantics of terms over a signature. The formalism also allows equations over types, by means of which many type systems can be described. The typechecker presented in this chapter does not take into account type equations. \par The specification, in {\sc Asf+Sdf}, of the syntax, type system and semantics of the formalism is presented in three stages: (1) untyped equational specifications (2) applicative one-level specifications (3) modular multi-level specifications. The definition of a typechecker for stages (2) and (3) is divided into four parts: (a) well-formedness judgements verifying type correctness of fully annotated terms and specifications, (b) non well-formedness rules giving descriptive error messages for the cases not covered under (a), (c) a type assignment function annotating the terms in a plain specification with types, and (d) a typechecking function which checks well-formedness after applying type assignment. These functions are defined uniformly for all levels of a specification. \par Aside of defining a new specification formalism, this chapter illustrates the use of {\sc Asf+Sdf} for the design and prototyping of sophisticated specification formalisms.},
  pubcat    = {book chapter},
  project   = {ASF+SDF},
  category  = {refereed},
  urlbib    = {Vis96.mls.bib},
}

@techreport{Vis96.mlsrep,
  author      = {Visser, Eelco},
  title       = {Multi-Level Specifications},
  year        = {1996},
  number      = {P9604},
  institution = {Programming Research Group, University of Amsterdam},
  address     = {April},
  note        = {Appeared in A. van Deursen and J. Heering and P. Klint, \emph{Language Prototyping. An Algebraic
                  Specification Approach}. World Scientific, 1996.},
  pubcat      = {techreport},
  project     = {ASF+SDF},
  category    = {non-refereed},
  urlbib      = {Vis96.mlsrep.bib},
}

@techreport{Vis96.ste,
  author      = {Visser, Eelco},
  title       = {Solving Type Equations in Multi-Level Specifications (preliminary version)},
  year        = {1996},
  month       = {May},
  number      = {P9606},
  institution = {Programming Research Group, University of Amsterdam},
  address     = {Amsterdam},
  url         = {http://ftp.wins.uva.nl/pub/programming-research/reports/1996/P9606.ps.Z},
  abstract    = {In first-order algebraic specification functions have types of the form $s_1\times\cdots\times{}s_n\to{}s_0$, where the $s_i$ are type constants. Such types exclude higher-order and polymorphic functions. In multi-level algebraic specification the structure of types used in function declarations is specified as an algebraic data type. By means of equations over types, sophisticated type systems can be modeled in a simple and uniform language. The type assignment for arbitrary multi-level specifications requires $E$-unification. Although this is undecidable in general, it is decidable for restricted sets of equations.\par In an earlier paper, the modular applicative multi-level equational specification formalism MLS is defined. The typechecker supports only free type constructors.\par In this paper we introduce multi-level specification by means of a series of MLS examples and discuss the extension with an $E$-unification procedure instead of syntactic unification of the type assignment function for MLS such that it supports type definitions, defined type operators and recursive types.},
  urlpsgz     = {http://www.cs.uu.nl/people/visser/ftp/P9606.ps.gz},
  project     = {ASF+SDF},
  pubcat      = {tecnical report},
  category    = {non-refereed},
  urlbib      = {Vis96.ste.bib},
}

@techreport{Vis97.cc,
  author      = {Visser, Eelco},
  title       = {Character Classes},
  year        = {1997},
  month       = {August},
  number      = {P9708},
  institution = {Programming Research Group, University of Amsterdam},
  url         = {http://adam.wins.uva.nl/~visser/syntax/sdf/charclasses/},
  urlpsgz     = {http://www.cs.uu.nl/people/visser/ftp/P9708.ps.gz},
  pubcat      = {techreport},
  project     = {ASF+SDF and SDF},
  category    = {non-refereed},
  urlbib      = {Vis97.cc.bib},
}

@incollection{Vis97.ccg,
  author    = {Visser, Eelco},
  title     = {From Context-free Grammars with Priorities to Character Class Grammars},
  year      = {1997},
  month     = {November},
  booktitle = {Liber Amicorum Paul Klint},
  publisher = {CWI},
  optpages  = {},
  address   = {Amsterdam},
  urlpsgz   = {http://www.cs.uu.nl/people/visser/ftp/P9717.ps.gz},
  pubcat    = {techreport},
  project   = {ASF+SDF and SDF},
  category  = {non-refereed},
  urlbib    = {Vis97.ccg.bib},
}

@techreport{Vis97.sdf,
  author      = {Visser, Eelco},
  title       = {A Family of Syntax Definition Formalisms},
  year        = {1997},
  month       = {July},
  number      = {P9706},
  institution = {Programming Research Group, University of Amsterdam},
  urlpsgz     = {http://www.cs.uu.nl/people/visser/ftp/P9706.ps.gz},
  url         = {http://www.wins.uva.nl/pub/programming-research/reports/1997/P9706.ps.gz},
  pubcat      = {techreport},
  project     = {ASF+SDF and SDF},
  category    = {non-refereed},
  urlbib      = {Vis97.sdf.bib},
}

@phdthesis{Vis97.thesis,
  author   = {Visser, Eelco},
  title    = {Syntax Definition for Language Prototyping},
  year     = {1997},
  month    = {September},
  school   = {University of Amsterdam},
  url      = {http://www.cs.uu.nl/groups/ST/twiki/bin/view/Visser/SyntaxDefinitionForLanguagePrototyping},
  urlpsgz  = {http://www.cs.uu.nl/people/visser/ftp/Vis97.ps.gz},
  pubcat   = {phdthesis},
  project  = {ASF+SDF and SDF},
  category = {key and refereed},
  urlbib   = {Vis97.thesis.bib},
}