module better-extract-method
imports

  dryad/structure/*
  dryad/jls/types/Subtyping
  dryad/type-check/*

  liblib

  JavaExtractMethod

signature
  constructors
    NoInit       : A

strategies

  /**
   * The main strategy. Calls sglri with the new parse table for Java
   * (including the notation for code to be extracted), then removes the
   * Extract markup to make it usable by dryad, then applies
   * dryad-reclassify-ambnames and then puts back the Extract markup.
   * After that, it extracts the fragment to a new method, if possible.
   * Rewriting will fail if extraction is not possible.
   */
  main =
    xtc-io-wrap(xtc-transform(!"sglri", !["-p", "NewJava.tbl", "-s", "CompilationUnit"])
              ; read-from
              ; strip-extract
              ; write-to
              ; xtc-transform(!"dryad-reclassify-ambnames")
	      ; xtc-transform(!"dryad-type-checker")
              ; read-from
              ; add-extract
	      ; where (prepare-rules)
              ; observables-wrap(extract-method)
              ; write-to
    )

strategies

  /**
   * Takes away the Extract markup and annotates the statements which are part
   * of the fragment to extract so that they can be restored later, after dryad
   * has been run on the code.
   */
  strip-extract =
    topdown(try(AnnotateExtract))

  /**
   * Puts back the Extract markup based on the annotations created by the
   * strip-extract strategy and adds an AfterExtract markup for the statements
   * that come after the fragment to extract.
   */
  add-extract =
    topdown(try(RestoreExtract))

  /**
   * Annotates all the statements in the body of an Extract, given the ATerm
   * marked by Extract.
   */
  annotate-extract =
    ?Extract(Id(theId), body)
    ; <map(\ x -> x {"extract-ann", theId} \)>body

  /**
   * Restores the Extract markup and adds the AfterExtract markup as well, given
   * the block in which the annotated statements are.
   */
  restore-extract(s) =
    where (filter(s) => extractStmts)
    ; where (split-fetch-keep(s) => (before, split {"extract-ann", theId}, after))
    ; <concat>[ before,
                [Extract(Id(theId), <map(\ x {_, _} -> x{} \)>extractStmts)],
                <drop(<length>extractStmts; dec)>after
	      ]

rules

  AnnotateExtract :
    Block(body) -> Block(newBody)
    where <split-fetch-keep(annotate-extract)>body => (before, split, after)
	; <concat>[before, split, after] => newBody

  AnnotateExtract :
    ConstrBody(x, body) -> ConstrBody(x, newBody)
    where <split-fetch-keep(annotate-extract)>body => (before, split, after)
	; <concat>[before, split, after] => newBody

  RestoreExtract :
    Block(body) -> Block(newBody)
    where <restore-extract(?_ {"extract-ann", _})>body => newBody

  RestoreExtract :
    ConstrBody(x, body) -> ConstrBody(x, newBody)
    where <restore-extract(?_ {"extract-ann", _})>body => newBody

strategies

  /**
   * Prepares the dynamic rules, which are used to simulate lists, by
   * making them rewrite to the empty list.
   */
  prepare-rules =
    rules (UsedVars : () -> [])
    ; rules (AfterUsedVars : () -> [])
    ; rules (AssignedToVars : () -> [])
    ; rules (DeclaredVars : () -> [])

  /**
   * This is the main traversal, properly handling all cases where rules need
   * to be either scoped, defined or applied. See the documentation for a more
   * detailed explanation.
   */
  extract-method =
       ?ClassDec(_, _)
       ; handle-class

    <+ ?MethodDec(_, _)
       ; handle-method

    <+ ?Block(_)
       ; handle-block

    <+ ?Extract(_, _)
       ; handle-extract

    <+ var-dec
       ; handle-var-dec
       ; fail

    <+ var-use
       ; handle-var-use
       ; fail

    <+ var-assign
       ; handle-var-assign
       ; fail

    <+ is-control-flow
       ; handle-control-flow

    <+ all(extract-method)

  /**
   * The strategy that handles a class declaration.
   */
  handle-class =
    {| RewriteClass:
      all(extract-method)
      ; try(RewriteClass)
    |}

  /**
   * The strategy that handles a method declaration.
   */
  handle-method =
    {| VarType :
      all(extract-method)
    |}

  /**
   * The strategy that handles a block.
   */
  handle-block =
    {| InBlock, CurLabel, IsDeclared, ContainsExtract, InAfterExtract :
      where(new => label)
      ; rules(ContainsExtract :- ())
      ; rules(InBlock+label)
      ; rules(CurLabel : () -> label)
      ; all(extract-method)
      ; ?block
      ; try(<ContainsExtract>()
          ; change-var-lists
	  ; define-rewrite-class-rule
	  ; <rewrite-block>block
	)
    |}

  /**
   * This strategy takes all the collected variable lists and transforms them
   * to what is actually needed to the rewrite process, through differences
   * and intersections of sets.
   */
  change-var-lists =
    <UsedVars>() => uv
    ; <AssignedToVars>() => av
    ; <AfterUsedVars>() => auv
    ; <DeclaredVars>() => dv

    ; <diff>(dv, auv) => dv'
    ; <diff>(uv, dv') => uv'
    ; <diff>(av, dv') => av'
    ; <isect>(av', auv) => av''
    ; <isect>(auv, dv) => auv'

    ; rules(UsedVars : () -> uv')
    ; rules(AssignedToVars : () -> av'')
    ; rules(AfterUsedVars : () -> auv')

  /**
   * This strategy defines the rule that rewrites the class (inserting the new
   * method).
   */
  define-rewrite-class-rule =
    <ExtractedCode>() => (x, stmts)
    ; <AssignedToVars>() => av
    ; (<eq>(<length>av, 1) < !av => [y]; <conc>(stmts, [ |[ return y; ]| ]) + !stmts) => emBody
    ; (<eq>(<length>av, 1) < !av => [y]; <VarType>y => (t, _) + !Void() => t)
    ; <AfterUsedVars>() => uav
    ; <UsedVars>()
    ; map(\ x -> Param([], <(VarType; Fst)>x, Id(x)) \) => param*
    ; <process-declarations>emBody => bstm*
    ; !|[ private t x(param*) { bstm* } ]| => em
    ; rules(
         RewriteClass :
           ClassDec(chead, ClassBody(cBody)) -> ClassDec(chead, ClassBody(newCBody))
           where <conc>(cBody, [em]) => newCBody
      )

  /**
   * This strategy is used to decide if there is any variable declaration
   * inside the fragment that need to be moved up, because it is used after
   * the fragment.
   */
  process-declarations =
    map(?LocalVarDecStm(<id>) < generate-new-declarations + id)
    ; flatten-list
                                                                                                                                                             
  /**
   * In conjunction with the previous strategy, this strategy will break
   * multiple variable declarations in a single line to multiple lines,
   * at the same time replacing a declaration + assignment with just the 
   * assignment if that variable declaration has been moved up.
   */
  generate-new-declarations =
    where(<AfterUsedVars>() => auv)
    ; var-dec
    ; map({x, t, e: ?(x, (t, e))
          ; ( <elem>(x, auv)
              < (<?NoInit()>e < ![] + !|[ x = e; ]|)
              + (<?NoInit()>e < !LocalVarDecStm(lvdec|[ t x ]|) + !LocalVarDecStm(lvdec|[ t x = e ]|))
            )
      })
    ; filter(not(?[]))

  /**
   * The strategy applied to a block to rewrite it.
   */
  rewrite-block =
    where(<AssignedToVars>() => av)
    ; where(<UsedVars>() => uv)
    ; topdown(try(RewriteExtract(|av, uv)))
    ; Block(flatten-list)

  /**
   * The strategy that handles the fragment to extract.
   */
  handle-extract =
    {| InExtract :
      ?Extract(Id(x), stmts)
      ; rules(ExtractedCode : () -> (x, stmts))
      ; rules(InExtract : () -> ())
      ; rules(ContainsExtract : () -> ())
      ; all(extract-method)
      ; rules(InAfterExtract : () -> ())
      ; rules(RewriteExtract(|av, uv) : Extract(_, _) -> dec-call
              where <length>av => nrAv
		  ; <map(\ x -> ExprName(Id(x)) \)>uv => e*
                  ; (    (<eq>(nrAv, 0)
                         ; !|[ x(e*); ]| => dec-call)
                      <+ (<eq>(nrAv, 1)
		         ; <AfterUsedVars>()
			 ; map(CreateDecs) => decs
                         ; !av => [y]
                         ; <conc>(decs, [ |[ y = x(e*); ]| ]) => dec-call)
                      <+ say(!"\nExtraction cannot be done because of more than one assignment to a variable in the fragment to extract.\n")
		         ; <exit>1
	            )
        )
    |}
    
  /**
   * The strategy that handles a variable declaration.
   */
  handle-var-dec =
    map(declare-var-dec-rules)
    ; all(extract-method)

  /**
   * This strategy defines the VarTye for a given variable and also adds it to
   * the list of DeclaredVars, if we are inside the fragment to extract.
   */
  declare-var-dec-rules =
    ?(x, (t, init))
    ; rules(VarType : x -> (t, init))
    ; try(<InExtract>(); <DeclaredVars>() => dv; rules (DeclaredVars : () -> <union>(dv, [x])))

  /**
   * The strategy that handles a variable use.
   */
  handle-var-use =
    ?[x]
    ; try(<InExtract>(); <UsedVars>() => uv; rules (UsedVars : () -> <union>(uv, [x])))
    ; try(<InAfterExtract>(); <AfterUsedVars>() => auv; rules (AfterUsedVars : () -> <union>(auv, [x])))

  /**
   * The strategy that handles a variable assignment.
   */
  handle-var-assign =
    ?[x]
    ; try(<InExtract>(); <AssignedToVars>() => av; rules (AssignedToVars : () -> <union>(av, [x])))

  /**
   * This strategy checks for the existance of control flow inside the
   * fragment, and exits with error code 1 if it happens to find it.
   */
  handle-control-flow =
    <InExtract>()
    ; say(!"\nExtraction cannot be done because of control flow.\n")
    ; <exit>1

rules

  CreateDecs : x -> |[ t x; ]|
    where VarType => (t,_)

strategies

  /**
   * Succeeds if applied to an assignment to a variable and returns the variable
   * name to which the assignment is made as a singleton list.
   */
  var-assign =
    ?Assign(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignMul(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignDiv(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignRemain(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignPlus(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignMinus(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignLeftShift(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignRightShift(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignURightShift(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignAnd(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignExcOr(ExprName(Id(<make-singleton-list>)), _)
    <+ ?AssignOr(ExprName(Id(<make-singleton-list>)), _)
    <+ ?VarDec(Id(<make-singleton-list>), _)

  /**
   * Succeeds if applied to the usage of a variable and returns the used
   * variable as a singleton list.
   */
  var-use =
    ?ExprName(Id(<make-singleton-list>))

  make-singleton-list =
    ![<id>]

  /**
   * Returns a list containing (var, type) tuples with all the variables
   * declared in the ATerm the strategy is applied to.
   */
  get-var-types =
    collect-all(var-dec, union, SkipNewScopes)
    ; flatten-list

  /**
   * If applied to a variable declaration, it returns a list of
   * (var, (type, initExpr)) tuples.
   */
  var-dec =
       ?LocalVarDec(_, type, varDecs)
       ; <get-var-type-tuples>(type, varDecs)
    <+ ?MethodDecHead(_, _, _, _, paramDecs, _)
       ; <get-param-type-tuples>paramDecs
    <+ ?ConstrDecHead(_, _, _, cparamDecs, _)
       ; <get-param-type-tuples>cparamDecs

  /**
   * Takes of tuple containing a type and a list of variable declarations and
   * returns a list of (var, type) tuples using the same type (received as a
   * parameter) for each of the variables in the list of variable declarations
   * (also received as a parameter).
   */
  get-var-type-tuples =
    ?(type, varDecs)
    ; <map(VarType(|type))>varDecs

  /**
   * Takes a list of parameter declarations and returs a simplified list which
   * only contains tuples with the names of the defined parameters and their
   * types.
   */
  get-param-type-tuples =
    map(ParamType)
    
rules

  VarType(|type) :
    VarDec(Id(x)) -> (x, (type, NoInit()))

  VarType(|type) :
    VarDec(Id(x), init) -> (x, (type, init))

  ParamType :
    Param(_, type, Id(x)) -> (x, (type, NoInit()))

  // for skipping anonymous classes
  SkipNewScopes :
    NewInstance(_, _, _, _) -> []

strategies

  /**
   * The strategy succeeds if the term to which it is applied is a control flow
   * statement (return, break, continue or label definition).
   */
  is-control-flow =
       ?Return(_)
    <+ ?Break(_)
    <+ ?Continue(_)
    <+ ?Labeled(_, _)

