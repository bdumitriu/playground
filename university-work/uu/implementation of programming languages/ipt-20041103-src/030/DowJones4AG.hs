-- do not edit; automatically generated by UU.AG
module DowJones4AG where

import UU.Parsing

dj :: Sequence
dj = Sequence_NextDay (-2)
      (Sequence_NextDay 4
        (Sequence_NextDay 1
          (Sequence_NextDay (-1)
            (Sequence_NextDay 3
              (Sequence_NextDay (-5)
                (Sequence_NextDay 0
                  (Sequence_NextDay 4 Sequence_Start
      ) ) ) ) ) ) )

dj_bestinvest :: Sequence -> Int
dj_bestinvest deltas
  =  let  (_,_,maxprofit) = sem_Sequence deltas
     in   maxprofit

instance Symbol Char

string2int = foldl (\val dig -> (10*val + ord dig -ord '0')) 0
{-# LINE 63 "DowJones4AG.lag" #-}
pPosInt  ::  IsParser a Char => a Int
pPosInt  =   string2int <$> pList1 ('0' <..> '9')

pInt     ::  IsParser a Char => a Int
pInt     =   (negate <$ (pSym '-') `opt` id) <*> pPosInt

pSpaces  ::  IsParser a Char => a String
pSpaces  =   pList (pSym ' ')

pDJ      ::  IsParser a Char => a (Int,Int,Int)
pDJ      =   pFoldrSep (sem_Sequence_NextDay,sem_Sequence_Start) pSpaces pInt

dj_bestinvest' inp
  = do  {  (_,_,maxprofit) <- parseIO pDJ inp
        ;  putStr (show maxprofit)
        }

main = dj_bestinvest' "-2 4 1 -1 3 -5 0 4"
-- Sequence ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      index                : Int
      low                  : Int
      maxprofit            : Int

-}
{-
   local variables for Sequence.NextDay:
      index
      low

-}
{-
   local variables for Sequence.Start:

-}
data Sequence = Sequence_NextDay (Int) (Sequence)
              | Sequence_Start 
-- semantic domain
type T_Sequence = ( (Int),(Int),(Int))
-- cata
sem_Sequence :: (Sequence) ->
                (T_Sequence)
sem_Sequence ((Sequence_NextDay (_delta) (_past))) =
    (sem_Sequence_NextDay (_delta) ((sem_Sequence (_past))))
sem_Sequence ((Sequence_Start )) =
    (sem_Sequence_Start )
sem_Sequence_NextDay :: (Int) ->
                        (T_Sequence) ->
                        (T_Sequence)
sem_Sequence_NextDay (delta_) (past_) =
    let _lhsOindex :: (Int)
        _lhsOlow :: (Int)
        _lhsOmaxprofit :: (Int)
        _pastIindex :: (Int)
        _pastIlow :: (Int)
        _pastImaxprofit :: (Int)
        ( _pastIindex,_pastIlow,_pastImaxprofit) =
            (past_ )
        -- "DowJones4AG.ag"(line 14, column 14)
        (_lhsOindex@_) =
            _index
        -- "DowJones4AG.ag"(line 13, column 14)
        (_index@_) =
            delta_ + _pastIindex
        -- "DowJones4AG.ag"(line 21, column 14)
        (_lhsOlow@_) =
            _low
        -- "DowJones4AG.ag"(line 20, column 14)
        (_low@_) =
            _index `min` _pastIlow
        -- "DowJones4AG.ag"(line 27, column 14)
        (_lhsOmaxprofit@_) =
            (_index - _low) `max` _pastImaxprofit
    in  ( _lhsOindex,_lhsOlow,_lhsOmaxprofit)
sem_Sequence_Start :: (T_Sequence)
sem_Sequence_Start  =
    let _lhsOindex :: (Int)
        _lhsOlow :: (Int)
        _lhsOmaxprofit :: (Int)
        -- "DowJones4AG.ag"(line 12, column 14)
        (_lhsOindex@_) =
            0
        -- "DowJones4AG.ag"(line 19, column 14)
        (_lhsOlow@_) =
            0
        -- "DowJones4AG.ag"(line 26, column 14)
        (_lhsOmaxprofit@_) =
            0
    in  ( _lhsOindex,_lhsOlow,_lhsOmaxprofit)


