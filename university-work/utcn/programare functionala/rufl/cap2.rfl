import Library;

data Sex = B | F

type Vector = (Int, Int)
type Persoana = (String, Int, Sex)

dec writeSex::Sex->Sex
def writeSex B = seq
	writeString "Barbat"
	B
    writeSex F = seq
	writeString "Femeie"
	F

dec writePersoana::Persoana->Persoana
def writePersoana (x, y, z) = seq
	putch '('
	writeString x
	putch ','
	writeInt y
	putch ','
	writeSex z
	putch ')'
	(x, y, z)

dec writeVector::Vector->Vector
def writeVector (x, y) = seq
	putch '('
	writeInt x
	putch ','
	writeInt y
	putch ')'
	(x, y)

dec sqr::Real->Real
def sqr r = r*r

dec cmmdc::Int->Int->Int
def cmmdc m n =
	if m == 0 then
		n
	else
		cmmdc (n % m) m

dec ack::Int->Int->Int
def ack m n =
	if m == 0 then
		n+1
	else
		if n == 0 then
			ack (m-1) 1
		else
			ack(m-1) (ack m (n-1))

dec fib1::Int->Int
def fib1 n =
	if n == 1 then
		1
	else
		if n == 2 then
			1
		else
			fib1(n-1)+fib1(n-2)

dec fib2::Int->Int
def fib2 1 = 1
    fib2 2 = 1
    fib2 n = fib2(n-1)+fib2(n-2)

dec scalar_vector::Int->Vector->Vector
def scalar_vector c (x, y) = (c*x, c*y)

dec pers1::Persoana
def pers1 = ("Bogdan DUMITRIU", 20, B)

-- precedenta trebuie sa fie intre 1 si 1000
-- cu cat mai mare, cu atat mai puternica
infixl 600 `plus_st`
dec plus_st::String->String->String
def x `plus_st` y = "(" ++ x ++ "+" ++ y ++ ")"

infixr 600 `plus_dr`
dec plus_dr::String->String->String
def x `plus_dr` y = "(" ++ x ++ "+" ++ y ++ ")"

infix 900 **
dec (**)::Int->Int->Int
def x**0 = 1
    x**y = x*x**(y-1)

dec fact::Int->Int
def fact 0 = 1
    fact n = n*fact (n-1)

dec let_test::(Int, Int)->Int
def let_test x =
	let
		dublu z = 2*z
		zece = 10
		(a, b) = x
	in
		dublu(10*(a+b))

dec prim::alpha->beta->alpha
def prim a b = a

dec secund::alpha->beta->beta
def secund a b = b

def main = seq
	writeString(secund ("abc", "def") "ace")