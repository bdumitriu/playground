module GameStateParserTests where

import Test.HUnit

import GameStateParser

sampleInitialState = unlines [
    "0",
    "0 0",
    "3a 3a 3a 3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "0 2 S a 0",
    "1 2 S a 0",
    "2 1 S a 0",
    "2 0 S a 0",
    "*",
    "*",
    "*",
    "*"]

sampleState1 = unlines $ [
    "179",
    "0 690",
    "3a 3a 3a 3a 3i 3a 3a 3a 3a 3a 2a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 0a 3a 3a 3a 3a 0a 0a 0a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 0f 3a 3a 3a 3a 3a 0a 3a 0a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 2g 3a 3a 3a 3a 3a 0a 0a 2a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3h 3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "5c 1d 6e 3a 3a 3a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 2a 3a 3a 3a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a 0a 0a 0a 3a 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 3a 3a 0a 2a 0j 3a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 0a 0a 0a 0a 0a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 0a 3a 0a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "3a 3a 3a 0a ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
    "0 4 C i 0",
    "2 3 S f 4",
    "3 2 S g 0",
    "4 0 C h 2",
    "10 4 C b 0",
    "7 5 C e 0",
    "*",
    "2 10 S c 0"]

testInitialState = TestCase (do let gameState = parseGameState sampleInitialState
                                    Just redChild3 = getChild3 . redChildren $ gameState
                                assertEqual "initial state turn is 0" 0 (turnNumber gameState)
                                assertEqual "initial state scores are 0" (0, 0) (scoreRed gameState, scoreBlue gameState)
                                assertEqual "visible field is ok" (Empty 3) (contents ((field gameState)!(7, 7)))
                                assertEqual "invisible field is ok" Unknown (contents ((field gameState)!(7, 8)))
                                assertEqual "3rd red child is in pos (2, 1)" (2, 1) (position redChild3)
                                assertEqual "3rd red child holds NotMuch" NotMuch (payload redChild3)
                                assertEqual "2nd blue child is invisible" Nothing (getChild2 . blueChildren $ gameState)
                            )

testSampleState1 = TestCase (do let gameState = parseGameState sampleState1
                                    f         = field gameState
                                    reds      = redChildren gameState
                                    blues     = blueChildren gameState
                                assertEqual "state turn is 179" 179 (turnNumber gameState)
                                assertEqual "scores is 690 to 0" (0, 690) (scoreRed gameState, scoreBlue gameState)
                                assertEqual "field with 'c'" (S_SnowBall 5) (contents ((field gameState)!(5, 0)))
                            )

tests = TestList [TestLabel "testInitialState" testInitialState]

main = runTestTT tests
