-- do not edit; automatically generated by UU.AG
module SLAttributes where

import Prelude hiding (Ordering(..))
import SLTypes
import SCode

import UU.Pretty

type TypeEnv = [(String,Type)]

typeCheckOp op leftType rightType = 
  let check ltp rtp restp = (restp, snd (matchTypes leftType ltp), snd (matchTypes rightType rtp))
  in  case op of
          "+"   -> check inttype  inttype  inttype
          "-"   -> check inttype  inttype  inttype
          "*"   -> check inttype  inttype  inttype
          "/"   -> check inttype  inttype  inttype
          "=="  -> check inttype  inttype  booltype
          "/="  -> check inttype  inttype  booltype
          "<"   -> check inttype  inttype  booltype
          ">"   -> check inttype  inttype  booltype
          "<="  -> check inttype  inttype  booltype
          ">="  -> check inttype  inttype  booltype
          "&&"  -> check booltype booltype booltype
          "||"  -> check booltype booltype booltype

lookupType var env = maybe  (anytype,ppErr "Undeclared variable") 
                            (\tp -> (tp,empty)) 
                            (lookup var env) 

addToEnv v env           = v : env 
addVarsToEnv vs tps env  = (zip vs tps) ++ env 
type CodeGen  = [S] -> [S]

lookupVar _ []              = error "Unbound variable!"
lookupVar v ((v',x,y):env)  = if v == v' then (x,y) else lookupVar v env

store singleStore mulStore displ size = 
  if size == 1
  then (singleStore displ:)
  else (mulStore displ size:)

load singleLoad mulLoad displ size = 
  if size == 1
  then (singleLoad displ:)
  else (mulLoad displ size:)

storeLocal fromLevel toLevel displ size =
  if fromLevel == toLevel
  then store STL STML displ size
  else  ( (LDL (-(paramDispl)):)
        . (followStaticLink toLevel (fromLevel - 1))
        . (store STA STMA displ size)
        )
loadLocal fromLevel toLevel displ size = 
  if fromLevel == toLevel
  then load LDL LDML displ size
  else  ((LDL (-(paramDispl)):)
        . (followStaticLink toLevel (fromLevel - 1))
        . (load LDA LDMA displ size))

followStaticLink toLevel fromLevel =
  if toLevel == fromLevel
  then id
  else  (  (LDA (-(paramDispl)):)
        . (annoteCode ("SL lev " ++ show fromLevel) 1)
        . (followStaticLink toLevel (fromLevel - 1)))
        

lamDefCode entryLabel afterLabel szParams bodyCode szResult = 
  let  disOfRET  = szParams + sizeOfLamAdm - szResult - 1
       szOfAJS   = disOfRET - 1
  in  (LDR "MP":)
      . (annoteCode "Static Link" 1)
      . (LDLABEL entryLabel:)
      . (annoteCode "Start PC" 1)
      . (BRA afterLabel:)
      . (DEFLABEL entryLabel:)
      . (LDR "MP":) 
      . (ANNOTE "SP" 0 0 "blue" "Prev MP":)
      . (LDRR "MP" "SP":)
      . bodyCode
      . (storeLocal 0 0 (-(paramDispl + szParams)) szResult)
      . (LDRR "SP" "MP":) . (STR "MP":)
      . (if disOfRET > 0 then (STS (-(disOfRET)):) else id)
      . (if szOfAJS > 0 then (AJS (-(szOfAJS)):) else id)
      . (RET:)
      . (DEFLABEL afterLabel:)

annoteCode msg size = (ANNOTE "SP" (1-size) 0 "green" msg:)

sizeOfLamAdm =  2 :: Int

type Level  = Int
type Displ  = Int
type Env    = [(String, Level, Displ)]

displOfLocalVars   = 1 :: Int
sizeOfLambdaAdmin  = 2 :: Int
paramDispl         = 2 :: Int


incrementLabel (Label i)    = Label (i+1)
-- Decl --------------------------------------------------------
{-
   inherited attributes:
      level                : Level

   chained attributes:
      displ                : Displ
      env                  : Env
      label                : Label
      typeEnv              : TypeEnv

   synthesised attributes:
      code                 : CodeGen
      localVarSize         : Int
      pp                   : PP_Doc

-}
{-
   local variables for Decl.Decl:
      ppTp
      inferredType
      declErr
      typeEnv
      declEnv

-}
data Decl = Decl_Decl (String) (Type) (Expr)
-- semantic domain
type T_Decl = (Displ) ->
              (Env) ->
              (Label) ->
              (Level) ->
              (TypeEnv) ->
              ( (CodeGen),(Displ),(Env),(Label),(Int),(PP_Doc),(TypeEnv))
-- cata
sem_Decl :: (Decl) ->
            (T_Decl)
sem_Decl ((Decl_Decl (_var) (_type) (_expr))) =
    (sem_Decl_Decl (_var) (_type) ((sem_Expr (_expr))))
sem_Decl_Decl :: (String) ->
                 (Type) ->
                 (T_Expr) ->
                 (T_Decl)
sem_Decl_Decl (var_) (type_) (expr_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOenv :: (Env)
            _lhsOlabel :: (Label)
            _lhsOlocalVarSize :: (Int)
            _lhsOpp :: (PP_Doc)
            _lhsOtypeEnv :: (TypeEnv)
            _exprIcode :: (CodeGen)
            _exprIdispl :: (Displ)
            _exprIlabel :: (Label)
            _exprIpp :: (PP_Doc)
            _exprIresType :: (Type)
            _exprOdispl :: (Displ)
            _exprOenv :: (Env)
            _exprOexpType :: (Type)
            _exprOlabel :: (Label)
            _exprOlevel :: (Level)
            _exprOtypeEnv :: (TypeEnv)
            ( _exprIcode,_exprIdispl,_exprIlabel,_exprIpp,_exprIresType) =
                (expr_ (_exprOdispl) (_exprOenv) (_exprOexpType) (_exprOlabel) (_exprOlevel) (_exprOtypeEnv))
            -- "./SLPrettyprint.ag"(line 36, column 15)
            (_lhsOpp@_) =
                text  var_ >#<  _ppTp >|<  _declErr >#< text "=" >#<  _exprIpp
            -- "./SLPrettyprint.ag"(line 33, column 15)
            (_ppTp@_) =
                if isAnnotated  type_
                then text "::" >#< show  type_
                else text "::" >#< show  _inferredType
            -- "./SLTypecheck.ag"(line 72, column 15)
            (_inferredType@_) =
                text "<ERROR: Missing type annotation>"
            -- "./SLTypecheck.ag"(line 71, column 15)
            (_declErr@_) =
                empty
            -- "./SLTypecheck.ag"(line 70, column 15)
            (_lhsOtypeEnv@_) =
                _typeEnv
            -- "./SLTypecheck.ag"(line 69, column 15)
            (_exprOtypeEnv@_) =
                _typeEnv
            -- "./SLTypecheck.ag"(line 68, column 15)
            (_typeEnv@_) =
                addToEnv (var_, type_)  _lhsItypeEnv
            -- "./SLTypecheck.ag"(line 67, column 15)
            (_exprOexpType@_) =
                type_
            -- "./SLCodeGen.ag"(line 58, column 15)
            (_lhsOlocalVarSize@_) =
                codeSize  type_
            -- "./SLCodeGen.ag"(line 56, column 15)
            (_lhsOcode@_) =
                _exprIcode
                .  annoteCode ("def of " ++  var_) (codeSize  type_)
            -- "./SLCodeGenEnv.ag"(line 43, column 11)
            (_lhsOdispl@_) =
                _lhsIdispl + codeSize  type_
            -- "./SLCodeGenEnv.ag"(line 42, column 11)
            (_lhsOenv@_) =
                _declEnv
            -- "./SLCodeGenEnv.ag"(line 41, column 11)
            (_exprOenv@_) =
                _declEnv
            -- "./SLCodeGenEnv.ag"(line 40, column 11)
            (_declEnv@_) =
                (var_, _lhsIlevel, _lhsIdispl) : _lhsIenv
            -- copy rule (up)
            (_lhsOlabel@_) =
                _exprIlabel
            -- copy rule (down)
            (_exprOdispl@_) =
                _lhsIdispl
            -- copy rule (down)
            (_exprOlabel@_) =
                _lhsIlabel
            -- copy rule (down)
            (_exprOlevel@_) =
                _lhsIlevel
        in  ( _lhsOcode,_lhsOdispl,_lhsOenv,_lhsOlabel,_lhsOlocalVarSize,_lhsOpp,_lhsOtypeEnv)
-- Decls -------------------------------------------------------
{-
   inherited attributes:
      level                : Level

   chained attributes:
      displ                : Displ
      env                  : Env
      label                : Label
      typeEnv              : TypeEnv

   synthesised attributes:
      code                 : CodeGen
      localVarsSize        : Int
      pps                  : [PP_Doc]

-}
{-
   local variables for Decls.Cons:

-}
{-
   local variables for Decls.Nil:

-}
type Decls = [(Decl)]
-- semantic domain
type T_Decls = (Displ) ->
               (Env) ->
               (Label) ->
               (Level) ->
               (TypeEnv) ->
               ( (CodeGen),(Displ),(Env),(Label),(Int),([PP_Doc]),(TypeEnv))
-- cata
sem_Decls :: (Decls) ->
             (T_Decls)
sem_Decls (list) =
    (foldr (sem_Decls_Cons) (sem_Decls_Nil) ((map sem_Decl list)))
sem_Decls_Cons :: (T_Decl) ->
                  (T_Decls) ->
                  (T_Decls)
sem_Decls_Cons (hd_) (tl_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOenv :: (Env)
            _lhsOlabel :: (Label)
            _lhsOlocalVarsSize :: (Int)
            _lhsOpps :: ([PP_Doc])
            _lhsOtypeEnv :: (TypeEnv)
            _hdIcode :: (CodeGen)
            _hdIdispl :: (Displ)
            _hdIenv :: (Env)
            _hdIlabel :: (Label)
            _hdIlocalVarSize :: (Int)
            _hdIpp :: (PP_Doc)
            _hdItypeEnv :: (TypeEnv)
            _hdOdispl :: (Displ)
            _hdOenv :: (Env)
            _hdOlabel :: (Label)
            _hdOlevel :: (Level)
            _hdOtypeEnv :: (TypeEnv)
            _tlIcode :: (CodeGen)
            _tlIdispl :: (Displ)
            _tlIenv :: (Env)
            _tlIlabel :: (Label)
            _tlIlocalVarsSize :: (Int)
            _tlIpps :: ([PP_Doc])
            _tlItypeEnv :: (TypeEnv)
            _tlOdispl :: (Displ)
            _tlOenv :: (Env)
            _tlOlabel :: (Label)
            _tlOlevel :: (Level)
            _tlOtypeEnv :: (TypeEnv)
            ( _hdIcode,_hdIdispl,_hdIenv,_hdIlabel,_hdIlocalVarSize,_hdIpp,_hdItypeEnv) =
                (hd_ (_hdOdispl) (_hdOenv) (_hdOlabel) (_hdOlevel) (_hdOtypeEnv))
            ( _tlIcode,_tlIdispl,_tlIenv,_tlIlabel,_tlIlocalVarsSize,_tlIpps,_tlItypeEnv) =
                (tl_ (_tlOdispl) (_tlOenv) (_tlOlabel) (_tlOlevel) (_tlOtypeEnv))
            -- "./SLPrettyprint.ag"(line 30, column 15)
            (_lhsOpps@_) =
                _hdIpp :  _tlIpps
            -- "./SLTypecheck.ag"(line 78, column 15)
            (_hdOtypeEnv@_) =
                _lhsItypeEnv
            -- "./SLTypecheck.ag"(line 77, column 15)
            (_lhsOtypeEnv@_) =
                _hdItypeEnv ++  _tlItypeEnv
            -- "./SLCodeGen.ag"(line 63, column 15)
            (_lhsOlocalVarsSize@_) =
                _hdIlocalVarSize +  _tlIlocalVarsSize
            -- "./SLCodeGen.ag"(line 62, column 15)
            (_lhsOcode@_) =
                _hdIcode .  _tlIcode
            -- copy rule (up)
            (_lhsOdispl@_) =
                _tlIdispl
            -- copy rule (up)
            (_lhsOenv@_) =
                _tlIenv
            -- copy rule (up)
            (_lhsOlabel@_) =
                _tlIlabel
            -- copy rule (down)
            (_hdOdispl@_) =
                _lhsIdispl
            -- copy rule (down)
            (_hdOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_hdOlabel@_) =
                _lhsIlabel
            -- copy rule (down)
            (_hdOlevel@_) =
                _lhsIlevel
            -- copy rule (chain)
            (_tlOdispl@_) =
                _hdIdispl
            -- copy rule (chain)
            (_tlOenv@_) =
                _hdIenv
            -- copy rule (chain)
            (_tlOlabel@_) =
                _hdIlabel
            -- copy rule (down)
            (_tlOlevel@_) =
                _lhsIlevel
            -- copy rule (chain)
            (_tlOtypeEnv@_) =
                _hdItypeEnv
        in  ( _lhsOcode,_lhsOdispl,_lhsOenv,_lhsOlabel,_lhsOlocalVarsSize,_lhsOpps,_lhsOtypeEnv)
sem_Decls_Nil :: (T_Decls)
sem_Decls_Nil  =
    \ _lhsIdispl
      _lhsIenv
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOenv :: (Env)
            _lhsOlabel :: (Label)
            _lhsOlocalVarsSize :: (Int)
            _lhsOpps :: ([PP_Doc])
            _lhsOtypeEnv :: (TypeEnv)
            -- "./SLPrettyprint.ag"(line 29, column 15)
            (_lhsOpps@_) =
                []
            -- "./SLTypecheck.ag"(line 76, column 15)
            (_lhsOtypeEnv@_) =
                []
            -- "./SLCodeGen.ag"(line 61, column 15)
            (_lhsOlocalVarsSize@_) =
                0
            -- "./SLCodeGen.ag"(line 60, column 15)
            (_lhsOcode@_) =
                id
            -- copy rule (chain)
            (_lhsOdispl@_) =
                _lhsIdispl
            -- copy rule (chain)
            (_lhsOenv@_) =
                _lhsIenv
            -- copy rule (chain)
            (_lhsOlabel@_) =
                _lhsIlabel
        in  ( _lhsOcode,_lhsOdispl,_lhsOenv,_lhsOlabel,_lhsOlocalVarsSize,_lhsOpps,_lhsOtypeEnv)
-- Expr --------------------------------------------------------
{-
   inherited attributes:
      env                  : Env
      expType              : Type
      level                : Level
      typeEnv              : TypeEnv

   chained attributes:
      displ                : Displ
      label                : Label

   synthesised attributes:
      code                 : CodeGen
      pp                   : PP_Doc
      resType              : Type

-}
{-
   local variables for Expr.Apply:
      argErr
      argtp
      restp
      funcErr

-}
{-
   local variables for Expr.Assign:
      exprErr
      vartp
      varErr
      varLevel
      varDispl

-}
{-
   local variables for Expr.Boolexpr:

-}
{-
   local variables for Expr.Ident:
      restp
      errmsg
      idLevel
      idDispl

-}
{-
   local variables for Expr.If:
      condErr
      restp
      ifErr
      afterElseLabel
      afterThenLabel

-}
{-
   local variables for Expr.Intexpr:

-}
{-
   local variables for Expr.Lam:
      argErr
      argTypes
      bodyErr
      bodyType
      lamLevel
      afterLamLabel
      lamLabel

-}
{-
   local variables for Expr.Lamcall:

-}
{-
   local variables for Expr.Let:
      exprSize

-}
{-
   local variables for Expr.Op:
      restp
      lerr
      rerr

-}
{-
   local variables for Expr.Seq:

-}
{-
   local variables for Expr.Unit:

-}
data Expr = Expr_Apply (Expr) (Expr)
          | Expr_Assign (String) (Expr)
          | Expr_Boolexpr (Bool)
          | Expr_Ident (String)
          | Expr_If (Expr) (Expr) (Expr)
          | Expr_Intexpr (Int)
          | Expr_Lam (Vars) (Expr)
          | Expr_Lamcall (Expr)
          | Expr_Let (Decls) (Expr)
          | Expr_Op (String) (Expr) (Expr)
          | Expr_Seq (Exprs)
          | Expr_Unit 
-- semantic domain
type T_Expr = (Displ) ->
              (Env) ->
              (Type) ->
              (Label) ->
              (Level) ->
              (TypeEnv) ->
              ( (CodeGen),(Displ),(Label),(PP_Doc),(Type))
-- cata
sem_Expr :: (Expr) ->
            (T_Expr)
sem_Expr ((Expr_Apply (_func) (_arg))) =
    (sem_Expr_Apply ((sem_Expr (_func))) ((sem_Expr (_arg))))
sem_Expr ((Expr_Assign (_var) (_expr))) =
    (sem_Expr_Assign (_var) ((sem_Expr (_expr))))
sem_Expr ((Expr_Boolexpr (_bool))) =
    (sem_Expr_Boolexpr (_bool))
sem_Expr ((Expr_Ident (_var))) =
    (sem_Expr_Ident (_var))
sem_Expr ((Expr_If (_cond) (_thenExpr) (_elseExpr))) =
    (sem_Expr_If ((sem_Expr (_cond))) ((sem_Expr (_thenExpr))) ((sem_Expr (_elseExpr))))
sem_Expr ((Expr_Intexpr (_int))) =
    (sem_Expr_Intexpr (_int))
sem_Expr ((Expr_Lam (_vars) (_expr))) =
    (sem_Expr_Lam ((sem_Vars (_vars))) ((sem_Expr (_expr))))
sem_Expr ((Expr_Lamcall (_call))) =
    (sem_Expr_Lamcall ((sem_Expr (_call))))
sem_Expr ((Expr_Let (_decls) (_expr))) =
    (sem_Expr_Let ((sem_Decls (_decls))) ((sem_Expr (_expr))))
sem_Expr ((Expr_Op (_op) (_le) (_re))) =
    (sem_Expr_Op (_op) ((sem_Expr (_le))) ((sem_Expr (_re))))
sem_Expr ((Expr_Seq (_exprs))) =
    (sem_Expr_Seq ((sem_Exprs (_exprs))))
sem_Expr ((Expr_Unit )) =
    (sem_Expr_Unit )
sem_Expr_Apply :: (T_Expr) ->
                  (T_Expr) ->
                  (T_Expr)
sem_Expr_Apply (func_) (arg_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            _funcIcode :: (CodeGen)
            _funcIdispl :: (Displ)
            _funcIlabel :: (Label)
            _funcIpp :: (PP_Doc)
            _funcIresType :: (Type)
            _funcOdispl :: (Displ)
            _funcOenv :: (Env)
            _funcOexpType :: (Type)
            _funcOlabel :: (Label)
            _funcOlevel :: (Level)
            _funcOtypeEnv :: (TypeEnv)
            _argIcode :: (CodeGen)
            _argIdispl :: (Displ)
            _argIlabel :: (Label)
            _argIpp :: (PP_Doc)
            _argIresType :: (Type)
            _argOdispl :: (Displ)
            _argOenv :: (Env)
            _argOexpType :: (Type)
            _argOlabel :: (Label)
            _argOlevel :: (Level)
            _argOtypeEnv :: (TypeEnv)
            ( _funcIcode,_funcIdispl,_funcIlabel,_funcIpp,_funcIresType) =
                (func_ (_funcOdispl) (_funcOenv) (_funcOexpType) (_funcOlabel) (_funcOlevel) (_funcOtypeEnv))
            ( _argIcode,_argIdispl,_argIlabel,_argIpp,_argIresType) =
                (arg_ (_argOdispl) (_argOenv) (_argOexpType) (_argOlabel) (_argOlevel) (_argOtypeEnv))
            -- "./SLPrettyprint.ag"(line 16, column 15)
            (_lhsOpp@_) =
                pp_parens (_funcIpp >|<  _funcErr)
                  >#< pp_parens (_argIpp >|<  _argErr)
            -- "./SLTypecheck.ag"(line 30, column 15)
            (_lhsOresType@_) =
                _restp
            -- "./SLTypecheck.ag"(line 29, column 15)
            (_argOexpType@_) =
                _argtp
            -- "./SLTypecheck.ag"(line 28, column 23)
            ((_,_argErr@_)) =
                matchTypes  _argIresType  _argtp
            -- "./SLTypecheck.ag"(line 26, column 23)
            ((_argtp@_,_restp@_,_funcErr@_)) =
                checkIfLambda  _funcIresType
            -- "./SLCodeGen.ag"(line 40, column 15)
            (_lhsOcode@_) =
                _argIcode .  _funcIcode
            -- "./SLCodeGenEnv.ag"(line 29, column 15)
            (_lhsOdispl@_) =
                _funcIdispl
            -- "./SLCodeGenEnv.ag"(line 28, column 15)
            (_funcOdispl@_) =
                _argIdispl
            -- "./SLCodeGenEnv.ag"(line 27, column 15)
            (_argOdispl@_) =
                _lhsIdispl
            -- copy rule (up)
            (_lhsOlabel@_) =
                _argIlabel
            -- copy rule (down)
            (_funcOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_funcOexpType@_) =
                _lhsIexpType
            -- copy rule (down)
            (_funcOlabel@_) =
                _lhsIlabel
            -- copy rule (down)
            (_funcOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_funcOtypeEnv@_) =
                _lhsItypeEnv
            -- copy rule (down)
            (_argOenv@_) =
                _lhsIenv
            -- copy rule (chain)
            (_argOlabel@_) =
                _funcIlabel
            -- copy rule (down)
            (_argOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_argOtypeEnv@_) =
                _lhsItypeEnv
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_Assign :: (String) ->
                   (T_Expr) ->
                   (T_Expr)
sem_Expr_Assign (var_) (expr_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            _exprIcode :: (CodeGen)
            _exprIdispl :: (Displ)
            _exprIlabel :: (Label)
            _exprIpp :: (PP_Doc)
            _exprIresType :: (Type)
            _exprOdispl :: (Displ)
            _exprOenv :: (Env)
            _exprOexpType :: (Type)
            _exprOlabel :: (Label)
            _exprOlevel :: (Level)
            _exprOtypeEnv :: (TypeEnv)
            ( _exprIcode,_exprIdispl,_exprIlabel,_exprIpp,_exprIresType) =
                (expr_ (_exprOdispl) (_exprOenv) (_exprOexpType) (_exprOlabel) (_exprOlevel) (_exprOtypeEnv))
            -- "./SLPrettyprint.ag"(line 23, column 15)
            (_lhsOpp@_) =
                text  var_ >|<  _varErr >#< text ":=" >#<  _exprIpp >|<  _exprErr
            -- "./SLTypecheck.ag"(line 25, column 15)
            (_lhsOresType@_) =
                unittype
            -- "./SLTypecheck.ag"(line 24, column 23)
            ((_,_exprErr@_)) =
                matchTypes  _exprIresType  _vartp
            -- "./SLTypecheck.ag"(line 23, column 23)
            ((_vartp@_,_varErr@_)) =
                lookupType  var_  _lhsItypeEnv
            -- "./SLCodeGen.ag"(line 38, column 22)
            ((_varLevel@_,_varDispl@_)) =
                lookupVar var_ _lhsIenv
            -- "./SLCodeGen.ag"(line 35, column 15)
            (_lhsOcode@_) =
                _exprIcode
                .  storeLocal   _lhsIlevel  _varLevel
                                _varDispl (codeSize  _exprIresType)
            -- copy rule (up)
            (_lhsOdispl@_) =
                _exprIdispl
            -- copy rule (up)
            (_lhsOlabel@_) =
                _exprIlabel
            -- copy rule (down)
            (_exprOdispl@_) =
                _lhsIdispl
            -- copy rule (down)
            (_exprOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_exprOexpType@_) =
                _lhsIexpType
            -- copy rule (down)
            (_exprOlabel@_) =
                _lhsIlabel
            -- copy rule (down)
            (_exprOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_exprOtypeEnv@_) =
                _lhsItypeEnv
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_Boolexpr :: (Bool) ->
                     (T_Expr)
sem_Expr_Boolexpr (bool_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            -- "./SLPrettyprint.ag"(line 13, column 15)
            (_lhsOpp@_) =
                text $ show  bool_
            -- "./SLTypecheck.ag"(line 13, column 15)
            (_lhsOresType@_) =
                booltype
            -- "./SLCodeGen.ag"(line 14, column 15)
            (_lhsOcode@_) =
                if  bool_ then (LDC 1:) else (LDC 0:)
            -- "./SLCodeGenEnv.ag"(line 21, column 15)
            (_lhsOdispl@_) =
                _lhsIdispl + codeSize booltype
            -- copy rule (chain)
            (_lhsOlabel@_) =
                _lhsIlabel
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_Ident :: (String) ->
                  (T_Expr)
sem_Expr_Ident (var_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            -- "./SLPrettyprint.ag"(line 14, column 15)
            (_lhsOpp@_) =
                text  var_ >|<  _errmsg
            -- "./SLTypecheck.ag"(line 15, column 15)
            (_lhsOresType@_) =
                _restp
            -- "./SLTypecheck.ag"(line 14, column 23)
            ((_restp@_,_errmsg@_)) =
                lookupType  var_  _lhsItypeEnv
            -- "./SLCodeGen.ag"(line 17, column 22)
            ((_idLevel@_,_idDispl@_)) =
                lookupVar  var_  _lhsIenv
            -- "./SLCodeGen.ag"(line 15, column 15)
            (_lhsOcode@_) =
                (loadLocal  _lhsIlevel  _idLevel  _idDispl (codeSize  _restp))
                .  (annoteCode ("copy of " ++  var_) (codeSize  _restp))
            -- "./SLCodeGenEnv.ag"(line 22, column 15)
            (_lhsOdispl@_) =
                _lhsIdispl + codeSize  _restp
            -- copy rule (chain)
            (_lhsOlabel@_) =
                _lhsIlabel
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_If :: (T_Expr) ->
               (T_Expr) ->
               (T_Expr) ->
               (T_Expr)
sem_Expr_If (cond_) (thenExpr_) (elseExpr_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            _condIcode :: (CodeGen)
            _condIdispl :: (Displ)
            _condIlabel :: (Label)
            _condIpp :: (PP_Doc)
            _condIresType :: (Type)
            _condOdispl :: (Displ)
            _condOenv :: (Env)
            _condOexpType :: (Type)
            _condOlabel :: (Label)
            _condOlevel :: (Level)
            _condOtypeEnv :: (TypeEnv)
            _thenExprIcode :: (CodeGen)
            _thenExprIdispl :: (Displ)
            _thenExprIlabel :: (Label)
            _thenExprIpp :: (PP_Doc)
            _thenExprIresType :: (Type)
            _thenExprOdispl :: (Displ)
            _thenExprOenv :: (Env)
            _thenExprOexpType :: (Type)
            _thenExprOlabel :: (Label)
            _thenExprOlevel :: (Level)
            _thenExprOtypeEnv :: (TypeEnv)
            _elseExprIcode :: (CodeGen)
            _elseExprIdispl :: (Displ)
            _elseExprIlabel :: (Label)
            _elseExprIpp :: (PP_Doc)
            _elseExprIresType :: (Type)
            _elseExprOdispl :: (Displ)
            _elseExprOenv :: (Env)
            _elseExprOexpType :: (Type)
            _elseExprOlabel :: (Label)
            _elseExprOlevel :: (Level)
            _elseExprOtypeEnv :: (TypeEnv)
            ( _condIcode,_condIdispl,_condIlabel,_condIpp,_condIresType) =
                (cond_ (_condOdispl) (_condOenv) (_condOexpType) (_condOlabel) (_condOlevel) (_condOtypeEnv))
            ( _thenExprIcode,_thenExprIdispl,_thenExprIlabel,_thenExprIpp,_thenExprIresType) =
                (thenExpr_ (_thenExprOdispl) (_thenExprOenv) (_thenExprOexpType) (_thenExprOlabel) (_thenExprOlevel) (_thenExprOtypeEnv))
            ( _elseExprIcode,_elseExprIdispl,_elseExprIlabel,_elseExprIpp,_elseExprIresType) =
                (elseExpr_ (_elseExprOdispl) (_elseExprOenv) (_elseExprOexpType) (_elseExprOlabel) (_elseExprOlevel) (_elseExprOtypeEnv))
            -- "./SLPrettyprint.ag"(line 21, column 15)
            (_lhsOpp@_) =
                pp_ite "if " " then " " else " " fi"
                  (_condIpp >|<  _condErr)  _thenExprIpp (_elseExprIpp >|<  _ifErr)
            -- "./SLTypecheck.ag"(line 21, column 15)
            (_lhsOresType@_) =
                _restp
            -- "./SLTypecheck.ag"(line 20, column 23)
            ((_,_condErr@_)) =
                matchTypes  _condIresType booltype
            -- "./SLTypecheck.ag"(line 19, column 23)
            ((_restp@_,_ifErr@_)) =
                matchTypes  _thenExprIresType  _elseExprIresType
            -- "./SLCodeGen.ag"(line 20, column 15)
            (_lhsOcode@_) =
                _condIcode
                .  (BRF  _afterThenLabel :)
                .  _thenExprIcode
                .  annoteCode "then value" (codeSize  _thenExprIresType)
                .  (BRA  _afterElseLabel :)
                .  (DEFLABEL  _afterThenLabel:)
                .  _elseExprIcode
                .  annoteCode "else value" (codeSize  _elseExprIresType)
                .  (DEFLABEL  _afterElseLabel:)
            -- "./SLCodeGenEnv.ag"(line 25, column 15)
            (_elseExprOdispl@_) =
                _lhsIdispl
            -- "./SLCodeGenEnv.ag"(line 24, column 15)
            (_thenExprOdispl@_) =
                _lhsIdispl
            -- "./SLLabel.ag"(line 12, column 10)
            (_condOlabel@_) =
                incrementLabel  _afterElseLabel
            -- "./SLLabel.ag"(line 11, column 10)
            (_afterElseLabel@_) =
                incrementLabel  _lhsIlabel
            -- "./SLLabel.ag"(line 10, column 10)
            (_afterThenLabel@_) =
                _lhsIlabel
            -- copy rule (up)
            (_lhsOdispl@_) =
                _elseExprIdispl
            -- copy rule (up)
            (_lhsOlabel@_) =
                _elseExprIlabel
            -- copy rule (down)
            (_condOdispl@_) =
                _lhsIdispl
            -- copy rule (down)
            (_condOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_condOexpType@_) =
                _lhsIexpType
            -- copy rule (down)
            (_condOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_condOtypeEnv@_) =
                _lhsItypeEnv
            -- copy rule (down)
            (_thenExprOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_thenExprOexpType@_) =
                _lhsIexpType
            -- copy rule (chain)
            (_thenExprOlabel@_) =
                _condIlabel
            -- copy rule (down)
            (_thenExprOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_thenExprOtypeEnv@_) =
                _lhsItypeEnv
            -- copy rule (down)
            (_elseExprOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_elseExprOexpType@_) =
                _lhsIexpType
            -- copy rule (chain)
            (_elseExprOlabel@_) =
                _thenExprIlabel
            -- copy rule (down)
            (_elseExprOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_elseExprOtypeEnv@_) =
                _lhsItypeEnv
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_Intexpr :: (Int) ->
                    (T_Expr)
sem_Expr_Intexpr (int_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            -- "./SLPrettyprint.ag"(line 12, column 15)
            (_lhsOpp@_) =
                text $ show  int_
            -- "./SLTypecheck.ag"(line 12, column 15)
            (_lhsOresType@_) =
                inttype
            -- "./SLCodeGen.ag"(line 13, column 15)
            (_lhsOcode@_) =
                (LDC int_:)
            -- "./SLCodeGenEnv.ag"(line 20, column 15)
            (_lhsOdispl@_) =
                _lhsIdispl + codeSize inttype
            -- copy rule (chain)
            (_lhsOlabel@_) =
                _lhsIlabel
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_Lam :: (T_Vars) ->
                (T_Expr) ->
                (T_Expr)
sem_Expr_Lam (vars_) (expr_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            _varsIdispl :: (Displ)
            _varsIenv :: (Env)
            _varsIparamsSize :: (Int)
            _varsIpp :: (PP_Doc)
            _varsIresTypes :: (Types)
            _varsIvariables :: ([String])
            _varsOdispl :: (Displ)
            _varsOenv :: (Env)
            _varsOexpTypes :: (Types)
            _varsOlevel :: (Level)
            _exprIcode :: (CodeGen)
            _exprIdispl :: (Displ)
            _exprIlabel :: (Label)
            _exprIpp :: (PP_Doc)
            _exprIresType :: (Type)
            _exprOdispl :: (Displ)
            _exprOenv :: (Env)
            _exprOexpType :: (Type)
            _exprOlabel :: (Label)
            _exprOlevel :: (Level)
            _exprOtypeEnv :: (TypeEnv)
            ( _varsIdispl,_varsIenv,_varsIparamsSize,_varsIpp,_varsIresTypes,_varsIvariables) =
                (vars_ (_varsOdispl) (_varsOenv) (_varsOexpTypes) (_varsOlevel))
            ( _exprIcode,_exprIdispl,_exprIlabel,_exprIpp,_exprIresType) =
                (expr_ (_exprOdispl) (_exprOenv) (_exprOexpType) (_exprOlabel) (_exprOlevel) (_exprOtypeEnv))
            -- "./SLPrettyprint.ag"(line 25, column 15)
            (_lhsOpp@_) =
                text "\\" >#<  _varsIpp >|<  _argErr >#< text "->"
                  >#<  _exprIpp >|<  _bodyErr
            -- "./SLTypecheck.ag"(line 39, column 15)
            (_lhsOresType@_) =
                makeFunctionType  _varsIresTypes  _exprIresType
            -- "./SLTypecheck.ag"(line 38, column 15)
            (_exprOexpType@_) =
                _bodyType
            -- "./SLTypecheck.ag"(line 37, column 15)
            (_varsOexpTypes@_) =
                _argTypes
            -- "./SLTypecheck.ag"(line 34, column 15)
            (_argErr@_) =
                if length  _argTypes == length  _varsIresTypes
                       then empty
                       else ppErr "Wrong number of arguments"
            -- "./SLTypecheck.ag"(line 33, column 15)
            (_argTypes@_) =
                extractArgTypes  _lhsIexpType
            -- "./SLTypecheck.ag"(line 32, column 23)
            ((_,_bodyErr@_)) =
                matchTypes  _exprIresType  _bodyType
            -- "./SLTypecheck.ag"(line 31, column 15)
            (_bodyType@_) =
                extractResType  _lhsIexpType
            -- "./SLTypecheck.ag"(line 46, column 15)
            (_exprOtypeEnv@_) =
                addVarsToEnv  _varsIvariables  _varsIresTypes  _lhsItypeEnv
            -- "./SLCodeGen.ag"(line 42, column 15)
            (_lhsOcode@_) =
                lamDefCode   _lamLabel  _afterLamLabel  _varsIparamsSize
                             _exprIcode (codeSize  _exprIresType)
            -- "./SLCodeGenEnv.ag"(line 37, column 15)
            (_varsOenv@_) =
                _lhsIenv
            -- "./SLCodeGenEnv.ag"(line 36, column 15)
            (_varsOlevel@_) =
                _lamLevel
            -- "./SLCodeGenEnv.ag"(line 35, column 15)
            (_varsOdispl@_) =
                -(sizeOfLambdaAdmin)
            -- "./SLCodeGenEnv.ag"(line 34, column 15)
            (_exprOenv@_) =
                _varsIenv
            -- "./SLCodeGenEnv.ag"(line 33, column 15)
            (_exprOdispl@_) =
                displOfLocalVars
            -- "./SLCodeGenEnv.ag"(line 32, column 15)
            (_exprOlevel@_) =
                _lamLevel
            -- "./SLCodeGenEnv.ag"(line 31, column 15)
            (_lamLevel@_) =
                _lhsIlevel + 1
            -- "./SLLabel.ag"(line 15, column 10)
            (_exprOlabel@_) =
                incrementLabel  _afterLamLabel
            -- "./SLLabel.ag"(line 14, column 10)
            (_afterLamLabel@_) =
                incrementLabel  _lhsIlabel
            -- "./SLLabel.ag"(line 13, column 10)
            (_lamLabel@_) =
                _lhsIlabel
            -- copy rule (up)
            (_lhsOdispl@_) =
                _exprIdispl
            -- copy rule (up)
            (_lhsOlabel@_) =
                _exprIlabel
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_Lamcall :: (T_Expr) ->
                    (T_Expr)
sem_Expr_Lamcall (call_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            _callIcode :: (CodeGen)
            _callIdispl :: (Displ)
            _callIlabel :: (Label)
            _callIpp :: (PP_Doc)
            _callIresType :: (Type)
            _callOdispl :: (Displ)
            _callOenv :: (Env)
            _callOexpType :: (Type)
            _callOlabel :: (Label)
            _callOlevel :: (Level)
            _callOtypeEnv :: (TypeEnv)
            ( _callIcode,_callIdispl,_callIlabel,_callIpp,_callIresType) =
                (call_ (_callOdispl) (_callOenv) (_callOexpType) (_callOlabel) (_callOlevel) (_callOtypeEnv))
            -- "./SLCodeGen.ag"(line 41, column 15)
            (_lhsOcode@_) =
                _callIcode . (JSR:)
            -- "./SLCodeGenEnv.ag"(line 30, column 15)
            (_lhsOdispl@_) =
                _lhsIdispl + codeSize  _callIresType
            -- copy rule (up)
            (_lhsOlabel@_) =
                _callIlabel
            -- copy rule (up)
            (_lhsOpp@_) =
                _callIpp
            -- copy rule (up)
            (_lhsOresType@_) =
                _callIresType
            -- copy rule (down)
            (_callOdispl@_) =
                _lhsIdispl
            -- copy rule (down)
            (_callOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_callOexpType@_) =
                _lhsIexpType
            -- copy rule (down)
            (_callOlabel@_) =
                _lhsIlabel
            -- copy rule (down)
            (_callOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_callOtypeEnv@_) =
                _lhsItypeEnv
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_Let :: (T_Decls) ->
                (T_Expr) ->
                (T_Expr)
sem_Expr_Let (decls_) (expr_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            _declsIcode :: (CodeGen)
            _declsIdispl :: (Displ)
            _declsIenv :: (Env)
            _declsIlabel :: (Label)
            _declsIlocalVarsSize :: (Int)
            _declsIpps :: ([PP_Doc])
            _declsItypeEnv :: (TypeEnv)
            _declsOdispl :: (Displ)
            _declsOenv :: (Env)
            _declsOlabel :: (Label)
            _declsOlevel :: (Level)
            _declsOtypeEnv :: (TypeEnv)
            _exprIcode :: (CodeGen)
            _exprIdispl :: (Displ)
            _exprIlabel :: (Label)
            _exprIpp :: (PP_Doc)
            _exprIresType :: (Type)
            _exprOdispl :: (Displ)
            _exprOenv :: (Env)
            _exprOexpType :: (Type)
            _exprOlabel :: (Label)
            _exprOlevel :: (Level)
            _exprOtypeEnv :: (TypeEnv)
            ( _declsIcode,_declsIdispl,_declsIenv,_declsIlabel,_declsIlocalVarsSize,_declsIpps,_declsItypeEnv) =
                (decls_ (_declsOdispl) (_declsOenv) (_declsOlabel) (_declsOlevel) (_declsOtypeEnv))
            ( _exprIcode,_exprIdispl,_exprIlabel,_exprIpp,_exprIresType) =
                (expr_ (_exprOdispl) (_exprOenv) (_exprOexpType) (_exprOlabel) (_exprOlevel) (_exprOtypeEnv))
            -- "./SLPrettyprint.ag"(line 18, column 15)
            (_lhsOpp@_) =
                text  "let" >|< pp_block "" "" "; "  _declsIpps
                  >-< " in" >#< _exprIpp
                  >-< " ni"
            -- "./SLTypecheck.ag"(line 22, column 15)
            (_lhsOresType@_) =
                _exprIresType
            -- "./SLTypecheck.ag"(line 47, column 15)
            (_exprOtypeEnv@_) =
                _declsItypeEnv
            -- "./SLCodeGen.ag"(line 30, column 15)
            (_lhsOcode@_) =
                _declsIcode
                .  _exprIcode
                .  store  STS STMS (-(_declsIlocalVarsSize +  _exprSize - 1))
                          (codeSize  _exprIresType)
                .  (AJS (- (_declsIlocalVarsSize - codeSize  _exprIresType)):)
            -- "./SLCodeGen.ag"(line 29, column 15)
            (_exprSize@_) =
                codeSize  _exprIresType
            -- "./SLCodeGenEnv.ag"(line 26, column 15)
            (_lhsOdispl@_) =
                _lhsIdispl + codeSize (_exprIresType)
            -- copy rule (up)
            (_lhsOlabel@_) =
                _exprIlabel
            -- copy rule (down)
            (_declsOdispl@_) =
                _lhsIdispl
            -- copy rule (down)
            (_declsOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_declsOlabel@_) =
                _lhsIlabel
            -- copy rule (down)
            (_declsOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_declsOtypeEnv@_) =
                _lhsItypeEnv
            -- copy rule (chain)
            (_exprOdispl@_) =
                _declsIdispl
            -- copy rule (chain)
            (_exprOenv@_) =
                _declsIenv
            -- copy rule (down)
            (_exprOexpType@_) =
                _lhsIexpType
            -- copy rule (chain)
            (_exprOlabel@_) =
                _declsIlabel
            -- copy rule (down)
            (_exprOlevel@_) =
                _lhsIlevel
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_Op :: (String) ->
               (T_Expr) ->
               (T_Expr) ->
               (T_Expr)
sem_Expr_Op (op_) (le_) (re_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            _leIcode :: (CodeGen)
            _leIdispl :: (Displ)
            _leIlabel :: (Label)
            _leIpp :: (PP_Doc)
            _leIresType :: (Type)
            _leOdispl :: (Displ)
            _leOenv :: (Env)
            _leOexpType :: (Type)
            _leOlabel :: (Label)
            _leOlevel :: (Level)
            _leOtypeEnv :: (TypeEnv)
            _reIcode :: (CodeGen)
            _reIdispl :: (Displ)
            _reIlabel :: (Label)
            _reIpp :: (PP_Doc)
            _reIresType :: (Type)
            _reOdispl :: (Displ)
            _reOenv :: (Env)
            _reOexpType :: (Type)
            _reOlabel :: (Label)
            _reOlevel :: (Level)
            _reOtypeEnv :: (TypeEnv)
            ( _leIcode,_leIdispl,_leIlabel,_leIpp,_leIresType) =
                (le_ (_leOdispl) (_leOenv) (_leOexpType) (_leOlabel) (_leOlevel) (_leOtypeEnv))
            ( _reIcode,_reIdispl,_reIlabel,_reIpp,_reIresType) =
                (re_ (_reOdispl) (_reOenv) (_reOexpType) (_reOlabel) (_reOlevel) (_reOtypeEnv))
            -- "./SLPrettyprint.ag"(line 15, column 15)
            (_lhsOpp@_) =
                _leIpp >#<  _lerr >#< text  op_ >#<  _rerr >#<  _reIpp
            -- "./SLTypecheck.ag"(line 18, column 15)
            (_lhsOresType@_) =
                _restp
            -- "./SLTypecheck.ag"(line 16, column 23)
            ((_restp@_,_lerr@_,_rerr@_)) =
                typeCheckOp  op_  _leIresType  _reIresType
            -- "./SLCodeGen.ag"(line 19, column 15)
            (_lhsOcode@_) =
                _leIcode .  _reIcode . (opCode  op_:)
            -- "./SLCodeGenEnv.ag"(line 23, column 15)
            (_lhsOdispl@_) =
                _lhsIdispl + codeSize  _restp
            -- copy rule (up)
            (_lhsOlabel@_) =
                _reIlabel
            -- copy rule (down)
            (_leOdispl@_) =
                _lhsIdispl
            -- copy rule (down)
            (_leOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_leOexpType@_) =
                _lhsIexpType
            -- copy rule (down)
            (_leOlabel@_) =
                _lhsIlabel
            -- copy rule (down)
            (_leOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_leOtypeEnv@_) =
                _lhsItypeEnv
            -- copy rule (chain)
            (_reOdispl@_) =
                _leIdispl
            -- copy rule (down)
            (_reOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_reOexpType@_) =
                _lhsIexpType
            -- copy rule (chain)
            (_reOlabel@_) =
                _leIlabel
            -- copy rule (down)
            (_reOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_reOtypeEnv@_) =
                _lhsItypeEnv
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_Seq :: (T_Exprs) ->
                (T_Expr)
sem_Expr_Seq (exprs_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            _exprsIcode :: (CodeGen)
            _exprsIlabel :: (Label)
            _exprsIpps :: ([PP_Doc])
            _exprsIresTypes :: (Types)
            _exprsOdispl :: (Displ)
            _exprsOenv :: (Env)
            _exprsOlabel :: (Label)
            _exprsOlevel :: (Level)
            _exprsOtypeEnv :: (TypeEnv)
            ( _exprsIcode,_exprsIlabel,_exprsIpps,_exprsIresTypes) =
                (exprs_ (_exprsOdispl) (_exprsOenv) (_exprsOlabel) (_exprsOlevel) (_exprsOtypeEnv))
            -- "./SLPrettyprint.ag"(line 24, column 15)
            (_lhsOpp@_) =
                pp_block "" "" "; " (_exprsIpps)
            -- "./SLTypecheck.ag"(line 40, column 15)
            (_lhsOresType@_) =
                if null  _exprsIresTypes
                       then anytype
                       else last  _exprsIresTypes
            -- "./SLCodeGen.ag"(line 44, column 15)
            (_lhsOcode@_) =
                _exprsIcode
            -- copy rule (chain)
            (_lhsOdispl@_) =
                _lhsIdispl
            -- copy rule (up)
            (_lhsOlabel@_) =
                _exprsIlabel
            -- copy rule (down)
            (_exprsOdispl@_) =
                _lhsIdispl
            -- copy rule (down)
            (_exprsOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_exprsOlabel@_) =
                _lhsIlabel
            -- copy rule (down)
            (_exprsOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_exprsOtypeEnv@_) =
                _lhsItypeEnv
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
sem_Expr_Unit :: (T_Expr)
sem_Expr_Unit  =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpType
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOdispl :: (Displ)
            _lhsOlabel :: (Label)
            _lhsOpp :: (PP_Doc)
            _lhsOresType :: (Type)
            -- "./SLPrettyprint.ag"(line 11, column 15)
            (_lhsOpp@_) =
                text "()"
            -- "./SLTypecheck.ag"(line 11, column 15)
            (_lhsOresType@_) =
                unittype
            -- "./SLCodeGen.ag"(line 12, column 15)
            (_lhsOcode@_) =
                id
            -- copy rule (chain)
            (_lhsOdispl@_) =
                _lhsIdispl
            -- copy rule (chain)
            (_lhsOlabel@_) =
                _lhsIlabel
        in  ( _lhsOcode,_lhsOdispl,_lhsOlabel,_lhsOpp,_lhsOresType)
-- Exprs -------------------------------------------------------
{-
   inherited attributes:
      displ                : Displ
      env                  : Env
      level                : Level
      typeEnv              : TypeEnv

   chained attributes:
      label                : Label

   synthesised attributes:
      code                 : CodeGen
      pps                  : [PP_Doc]
      resTypes             : Types

-}
{-
   local variables for Exprs.Cons:
      codesize

-}
{-
   local variables for Exprs.Nil:

-}
type Exprs = [(Expr)]
-- semantic domain
type T_Exprs = (Displ) ->
               (Env) ->
               (Label) ->
               (Level) ->
               (TypeEnv) ->
               ( (CodeGen),(Label),([PP_Doc]),(Types))
-- cata
sem_Exprs :: (Exprs) ->
             (T_Exprs)
sem_Exprs (list) =
    (foldr (sem_Exprs_Cons) (sem_Exprs_Nil) ((map sem_Expr list)))
sem_Exprs_Cons :: (T_Expr) ->
                  (T_Exprs) ->
                  (T_Exprs)
sem_Exprs_Cons (hd_) (tl_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOlabel :: (Label)
            _lhsOpps :: ([PP_Doc])
            _lhsOresTypes :: (Types)
            _hdIcode :: (CodeGen)
            _hdIdispl :: (Displ)
            _hdIlabel :: (Label)
            _hdIpp :: (PP_Doc)
            _hdIresType :: (Type)
            _hdOdispl :: (Displ)
            _hdOenv :: (Env)
            _hdOexpType :: (Type)
            _hdOlabel :: (Label)
            _hdOlevel :: (Level)
            _hdOtypeEnv :: (TypeEnv)
            _tlIcode :: (CodeGen)
            _tlIlabel :: (Label)
            _tlIpps :: ([PP_Doc])
            _tlIresTypes :: (Types)
            _tlOdispl :: (Displ)
            _tlOenv :: (Env)
            _tlOlabel :: (Label)
            _tlOlevel :: (Level)
            _tlOtypeEnv :: (TypeEnv)
            ( _hdIcode,_hdIdispl,_hdIlabel,_hdIpp,_hdIresType) =
                (hd_ (_hdOdispl) (_hdOenv) (_hdOexpType) (_hdOlabel) (_hdOlevel) (_hdOtypeEnv))
            ( _tlIcode,_tlIlabel,_tlIpps,_tlIresTypes) =
                (tl_ (_tlOdispl) (_tlOenv) (_tlOlabel) (_tlOlevel) (_tlOtypeEnv))
            -- "./SLPrettyprint.ag"(line 41, column 15)
            (_lhsOpps@_) =
                _hdIpp :  _tlIpps
            -- "./SLTypecheck.ag"(line 53, column 15)
            (_hdOtypeEnv@_) =
                _lhsItypeEnv
            -- "./SLTypecheck.ag"(line 52, column 15)
            (_hdOexpType@_) =
                anytype
            -- "./SLTypecheck.ag"(line 51, column 15)
            (_lhsOresTypes@_) =
                _hdIresType :  _tlIresTypes
            -- "./SLCodeGen.ag"(line 50, column 15)
            (_lhsOcode@_) =
                let adjustSP =  if null  _tlIresTypes ||  _codesize == 0
                                then id
                                else (AJS (-(_codesize)):)
                in  _hdIcode . adjustSP .  _tlIcode
            -- "./SLCodeGen.ag"(line 49, column 15)
            (_codesize@_) =
                codeSize  _hdIresType
            -- copy rule (up)
            (_lhsOlabel@_) =
                _tlIlabel
            -- copy rule (down)
            (_hdOdispl@_) =
                _lhsIdispl
            -- copy rule (down)
            (_hdOenv@_) =
                _lhsIenv
            -- copy rule (down)
            (_hdOlabel@_) =
                _lhsIlabel
            -- copy rule (down)
            (_hdOlevel@_) =
                _lhsIlevel
            -- copy rule (chain)
            (_tlOdispl@_) =
                _hdIdispl
            -- copy rule (down)
            (_tlOenv@_) =
                _lhsIenv
            -- copy rule (chain)
            (_tlOlabel@_) =
                _hdIlabel
            -- copy rule (down)
            (_tlOlevel@_) =
                _lhsIlevel
            -- copy rule (down)
            (_tlOtypeEnv@_) =
                _lhsItypeEnv
        in  ( _lhsOcode,_lhsOlabel,_lhsOpps,_lhsOresTypes)
sem_Exprs_Nil :: (T_Exprs)
sem_Exprs_Nil  =
    \ _lhsIdispl
      _lhsIenv
      _lhsIlabel
      _lhsIlevel
      _lhsItypeEnv ->
        let _lhsOcode :: (CodeGen)
            _lhsOlabel :: (Label)
            _lhsOpps :: ([PP_Doc])
            _lhsOresTypes :: (Types)
            -- "./SLPrettyprint.ag"(line 40, column 15)
            (_lhsOpps@_) =
                []
            -- "./SLTypecheck.ag"(line 54, column 15)
            (_lhsOresTypes@_) =
                []
            -- "./SLCodeGen.ag"(line 48, column 15)
            (_lhsOcode@_) =
                id
            -- copy rule (chain)
            (_lhsOlabel@_) =
                _lhsIlabel
        in  ( _lhsOcode,_lhsOlabel,_lhsOpps,_lhsOresTypes)
-- Root --------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:
      ppCode               : PP_Doc
      ppExpr               : PP_Doc
      type                 : Type

-}
{-
   local variables for Root.Root:

-}
data Root = Root_Root (Expr)
-- semantic domain
type T_Root = ( (PP_Doc),(PP_Doc),(Type))
-- cata
sem_Root :: (Root) ->
            (T_Root)
sem_Root ((Root_Root (_expr))) =
    (sem_Root_Root ((sem_Expr (_expr))))
sem_Root_Root :: (T_Expr) ->
                 (T_Root)
sem_Root_Root (expr_) =
    let _lhsOppCode :: (PP_Doc)
        _lhsOppExpr :: (PP_Doc)
        _lhsOtype :: (Type)
        _exprIcode :: (CodeGen)
        _exprIdispl :: (Displ)
        _exprIlabel :: (Label)
        _exprIpp :: (PP_Doc)
        _exprIresType :: (Type)
        _exprOdispl :: (Displ)
        _exprOenv :: (Env)
        _exprOexpType :: (Type)
        _exprOlabel :: (Label)
        _exprOlevel :: (Level)
        _exprOtypeEnv :: (TypeEnv)
        ( _exprIcode,_exprIdispl,_exprIlabel,_exprIpp,_exprIresType) =
            (expr_ (_exprOdispl) (_exprOenv) (_exprOexpType) (_exprOlabel) (_exprOlevel) (_exprOtypeEnv))
        -- "./SLPrettyprint.ag"(line 8, column 10)
        (_lhsOppExpr@_) =
            _exprIpp
        -- "./SLTypecheck.ag"(line 6, column 15)
        (_exprOexpType@_) =
            anytype
        -- "./SLTypecheck.ag"(line 5, column 15)
        (_exprOtypeEnv@_) =
            []
        -- "./SLTypecheck.ag"(line 4, column 15)
        (_lhsOtype@_) =
            _exprIresType
        -- "./SLCodeGen.ag"(line 8, column 15)
        (_lhsOppCode@_) =
            vlist  .  map (text . show )  .  (_exprIcode)  .  (TRAP 0:)  .  (HALT:)  $   []
        -- "./SLCodeGenEnv.ag"(line 17, column 10)
        (_exprOdispl@_) =
            displOfLocalVars
        -- "./SLCodeGenEnv.ag"(line 16, column 10)
        (_exprOenv@_) =
            []
        -- "./SLCodeGenEnv.ag"(line 15, column 10)
        (_exprOlevel@_) =
            0
        -- "./SLLabel.ag"(line 8, column 10)
        (_exprOlabel@_) =
            Label 0
    in  ( _lhsOppCode,_lhsOppExpr,_lhsOtype)
-- Vars --------------------------------------------------------
{-
   inherited attributes:
      expTypes             : Types
      level                : Level

   chained attributes:
      displ                : Displ
      env                  : Env

   synthesised attributes:
      paramsSize           : Int
      pp                   : PP_Doc
      resTypes             : Types
      variables            : [String]

-}
{-
   local variables for Vars.Cons:
      argtp
      argtps
      varDispl

-}
{-
   local variables for Vars.Nil:

-}
type Vars = [(String)]
-- semantic domain
type T_Vars = (Displ) ->
              (Env) ->
              (Types) ->
              (Level) ->
              ( (Displ),(Env),(Int),(PP_Doc),(Types),([String]))
-- cata
sem_Vars :: (Vars) ->
            (T_Vars)
sem_Vars (list) =
    (foldr (sem_Vars_Cons) (sem_Vars_Nil) (list))
sem_Vars_Cons :: (String) ->
                 (T_Vars) ->
                 (T_Vars)
sem_Vars_Cons (hd_) (tl_) =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpTypes
      _lhsIlevel ->
        let _lhsOdispl :: (Displ)
            _lhsOenv :: (Env)
            _lhsOparamsSize :: (Int)
            _lhsOpp :: (PP_Doc)
            _lhsOresTypes :: (Types)
            _lhsOvariables :: ([String])
            _tlIdispl :: (Displ)
            _tlIenv :: (Env)
            _tlIparamsSize :: (Int)
            _tlIpp :: (PP_Doc)
            _tlIresTypes :: (Types)
            _tlIvariables :: ([String])
            _tlOdispl :: (Displ)
            _tlOenv :: (Env)
            _tlOexpTypes :: (Types)
            _tlOlevel :: (Level)
            ( _tlIdispl,_tlIenv,_tlIparamsSize,_tlIpp,_tlIresTypes,_tlIvariables) =
                (tl_ (_tlOdispl) (_tlOenv) (_tlOexpTypes) (_tlOlevel))
            -- "./SLPrettyprint.ag"(line 45, column 15)
            (_lhsOpp@_) =
                text  hd_ >#<  _tlIpp
            -- "./SLTypecheck.ag"(line 61, column 15)
            (_lhsOvariables@_) =
                hd_ :  _tlIvariables
            -- "./SLTypecheck.ag"(line 60, column 15)
            (_lhsOresTypes@_) =
                _argtp :  _tlIresTypes
            -- "./SLTypecheck.ag"(line 59, column 15)
            (_tlOexpTypes@_) =
                _argtps
            -- "./SLTypecheck.ag"(line 58, column 23)
            ((_argtp@_,_argtps@_)) =
                getFirstArgType  _lhsIexpTypes
            -- "./SLCodeGen.ag"(line 67, column 15)
            (_lhsOparamsSize@_) =
                _tlIparamsSize + codeSize  _argtp
            -- "./SLCodeGenEnv.ag"(line 47, column 11)
            (_tlOdispl@_) =
                _varDispl
            -- "./SLCodeGenEnv.ag"(line 46, column 11)
            (_tlOenv@_) =
                (hd_, _lhsIlevel, _varDispl) :  _lhsIenv
            -- "./SLCodeGenEnv.ag"(line 45, column 11)
            (_varDispl@_) =
                _lhsIdispl - codeSize  _argtp
            -- copy rule (up)
            (_lhsOdispl@_) =
                _tlIdispl
            -- copy rule (up)
            (_lhsOenv@_) =
                _tlIenv
            -- copy rule (down)
            (_tlOlevel@_) =
                _lhsIlevel
        in  ( _lhsOdispl,_lhsOenv,_lhsOparamsSize,_lhsOpp,_lhsOresTypes,_lhsOvariables)
sem_Vars_Nil :: (T_Vars)
sem_Vars_Nil  =
    \ _lhsIdispl
      _lhsIenv
      _lhsIexpTypes
      _lhsIlevel ->
        let _lhsOdispl :: (Displ)
            _lhsOenv :: (Env)
            _lhsOparamsSize :: (Int)
            _lhsOpp :: (PP_Doc)
            _lhsOresTypes :: (Types)
            _lhsOvariables :: ([String])
            -- "./SLPrettyprint.ag"(line 44, column 15)
            (_lhsOpp@_) =
                empty
            -- "./SLTypecheck.ag"(line 63, column 15)
            (_lhsOvariables@_) =
                []
            -- "./SLTypecheck.ag"(line 62, column 15)
            (_lhsOresTypes@_) =
                []
            -- "./SLCodeGen.ag"(line 66, column 15)
            (_lhsOparamsSize@_) =
                0
            -- copy rule (chain)
            (_lhsOdispl@_) =
                _lhsIdispl
            -- copy rule (chain)
            (_lhsOenv@_) =
                _lhsIenv
        in  ( _lhsOdispl,_lhsOenv,_lhsOparamsSize,_lhsOpp,_lhsOresTypes,_lhsOvariables)


