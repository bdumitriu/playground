specification

  signature
    constructors
      Index        : Id() * Exp() * Exp() -> Index()
      UGE          : RelOp()
      UGT          : RelOp()
      ULE          : RelOp()
      ULT          : RelOp()
      GE           : RelOp()
      LE           : RelOp()
      GT           : RelOp()
      LT           : RelOp()
      NE           : RelOp()
      EQ           : RelOp()
      XOR          : BinOp()
      ARSHIFT      : BinOp()
      RSHIFT       : BinOp()
      LSHIFT       : BinOp()
      OR           : BinOp()
      AND          : BinOp()
      DIV          : BinOp()
      MINUS        : BinOp()
      POW          : BinOp()
      MUL          : BinOp()
      PLUS         : BinOp()
      FIELD        : Id() * Ty() -> FIELD()
      FUN          : List(Ty()) * Ty() -> Ty()
      ARRAY        : Ty() * Id() -> Ty()
      RECORD       : List(FIELD()) * Id() -> Ty()
      NAME         : Id() -> Ty()
      UNIT         : Ty()
      NIL          : Ty()
      STRING       : Ty()
      INT          : Ty()
      IGNORE       : Ty()
      Field        : Id() * TypeId() -> Field()
      ArrayTy      : TypeId() -> Type()
      RecordTy     : List(Field()) -> Type()
      NameTy       : TypeId() -> Type()
      Tid          : Id() -> TypeId()
      Code         : TypeId() -> TypeId()
      Tp           : TypeId() -> TypeAn()
      NoTp         : TypeAn()
      FArg         : Id() * TypeAn() -> FArg()
      FunDec       : Id() * List(FArg()) * TypeAn() * Exp() -> FunDec()
      TypeDec      : Id() * Type() -> TypeDec()
      FunDecs      : List(FunDec()) -> Dec()
      VarDecNoInit : Id() * TypeAn() -> Dec()
      VarDec       : Id() * TypeAn() * Exp() -> Dec()
      TypeDecs     : List(TypeDec()) -> Dec()
      Import       : Id() -> Dec()
      Module       : Id() * List(Dec()) -> Module()
      InitField    : Id() * Exp() -> InitField()
      Dynamic      : Exp() -> Exp()
      Static       : Exp() -> Exp()
      CR           : Exp() * BinOp() * Exp() * Var() -> Exp()
      Tan          : Exp() -> Exp()
      Cos          : Exp() -> Exp()
      Sin          : Exp() -> Exp()
      Exp          : Exp() -> Exp()
      Abs          : Exp() -> Exp()
      Log          : Exp() -> Exp()
      Fac          : Exp() -> Exp()
      Prod         : List(Index()) * Exp() -> Exp()
      Sum          : List(Index()) * Exp() -> Exp()
      Or           : Exp() * Exp() -> Exp()
      And          : Exp() * Exp() -> Exp()
      False        : Exp()
      True         : Exp()
      Leq          : Exp() * Exp() -> Exp()
      Geq          : Exp() * Exp() -> Exp()
      Lt           : Exp() * Exp() -> Exp()
      Gt           : Exp() * Exp() -> Exp()
      Neq          : Exp() * Exp() -> Exp()
      Eq           : Exp() * Exp() -> Exp()
      CMinus       : Exp() * Exp() -> Exp()
      CPlus        : Exp() * Exp() -> Exp()
      Minus        : Exp() * Exp() -> Exp()
      Plus         : Exp() * Exp() -> Exp()
      Divide       : Exp() * Exp() -> Exp()
      Times        : Exp() * Exp() -> Exp()
      Power        : Exp() * Exp() -> Exp()
      Uminus       : Exp() -> Exp()
      RelOp        : RelOp() * Exp() * Exp() -> Exp()
      BinOp        : BinOp() * Exp() * Exp() -> Exp()
      Typed        : Exp() * Ty() -> Exp()
      Let          : List(Dec()) * List(Exp()) -> Exp()
      IfGoto       : Exp() * Id() -> Exp()
      Goto         : Id() -> Exp()
      Label        : Id() -> Exp()
      ParAssign    : List(LValue()) * List(Exp()) -> Exp()
      ForStride    : Var() * Exp() * Exp() * Exp() * Exp() -> Exp()
      Break        : Exp()
      For          : Var() * Exp() * Exp() * Exp() -> Exp()
      DoWhile      : Exp() * Exp() -> Exp()
      While        : Exp() * Exp() -> Exp()
      IfThen       : Exp() * Exp() -> Exp()
      If           : Exp() * Exp() * Exp() -> Exp()
      Seq          : List(Exp()) -> Exp()
      ExpLabel     : IntConst() * Exp() -> Exp()
      Assign       : LValue() * Exp() -> Exp()
      Array        : TypeId() * List(Exp()) * Exp() -> Exp()
      Record       : TypeId() * List(InitField()) -> Exp()
      Call         : Var() * List(Exp()) -> Exp()
                   : LValue() -> Exp()
      NilExp       : Exp()
      String       : StrConst() -> Exp()
      Real         : RealConst() -> Exp()
      Int          : IntConst() -> Exp()
      Range        : Exp() * Exp() -> Sub()
      Scalar       : Exp() -> Sub()
      Dynamic      : LValue() -> LValue()
      Static       : LValue() -> LValue()
      Typed        : LValue() * Ty() -> LValue()
      Subscript    : LValue() * List(Sub()) -> LValue()
      FieldVar     : LValue() * Id() -> LValue()
                   : Var() -> LValue()
      Var          : Id() -> Var()
                   : String() -> RealConst()
                   : String() -> StrConst()
                   : String() -> IntConst()
                   : String() -> Id()

  signature
    constructors
      Some : a -> Option(a)
      None : Option(a)

  signature
    constructors
      Cons : a * List(a) -> List(a)
      Nil  : List(a)
      Conc : List(a) * List(a) -> List(a)
